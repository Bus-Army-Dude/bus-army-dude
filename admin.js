// admin.js (Version includes Status Page Management - Corrected Order v5)

// *** Import Firebase services from your corrected init file ***
import { db, auth } from './firebase-init.js'; // Ensure path is correct

// Import Firebase functions
import {
    getFirestore, collection, addDoc, getDocs, doc, deleteDoc, updateDoc, setDoc, serverTimestamp, getDoc, query, orderBy, where, limit, Timestamp, deleteField, arrayUnion
} from "https://www.gstatic.com/firebasejs/10.10.0/firebase-firestore.js";
import { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-auth.js";

// *** Global Variables ***
let allShoutouts = { tiktok: [], instagram: [], youtube: [] };
let allUsefulLinks = [];
let allSocialLinks = [];
let allDisabilities = [];
let allTechItems = [];
let allFaqs = [];
let allActivityLogEntries = [];
let allStatusGroups = [];
let allStatusComponents = [];
let inactivityTimer;
let expirationTime;
let displayIntervalId;
const INACTIVITY_TIMEOUT_MS = 15 * 60 * 1000; // 15 minutes
const activityEvents = ['mousemove', 'mousedown', 'keypress', 'touchstart', 'scroll'];
let isAddingShoutout = false;


document.addEventListener('DOMContentLoaded', () => {
    // First, check if db and auth were successfully imported/initialized
    if (!db || !auth) {
        console.error("Firestore (db) or Auth not initialized correctly. Check firebase-init.js and imports.");
        alert("FATAL ERROR: Firebase services failed to load. Admin panel disabled.");
        return;
    }
    console.log("Admin DOM Loaded. Setting up UI and CRUD functions.");

    // ============================================================
    // SECTION 1: FIRESTORE REFERENCES
    // ============================================================
    const profileDocRef = doc(db, "site_config", "mainProfile");
    const shoutoutsMetaRef = doc(db, 'siteConfig', 'shoutoutsMetadata');
    const usefulLinksCollectionRef = collection(db, "useful_links");
    const socialLinksCollectionRef = collection(db, "social_links");
    const presidentDocRef = doc(db, "site_config", "currentPresident");
    const faqsCollectionRef = collection(db, "faqs");
    const disabilitiesCollectionRef = collection(db, "disabilities");
    const techItemsCollectionRef = collection(db, "tech_items");
    const businessDocRef = doc(db, "site_config", "businessDetails");
    const statusGroupsCollectionRef = collection(db, "status_groups");
    const componentsCollectionRef = collection(db, "status_components");
    const incidentsCollectionRef = collection(db, "status_incidents");
    const maintenanceCollectionRef = collection(db, "status_maintenance");
    const activityLogCollectionRef = collection(db, "activity_log");

    // ============================================================
    // SECTION 2: DOM ELEMENT REFERENCES (ALL DEFINITIONS HERE)
    // ============================================================

    // --- Login & Core Admin Elements ---
    const loginSection = document.getElementById('login-section');
    const adminContent = document.getElementById('admin-content');
    const loginForm = document.getElementById('login-form');
    const logoutButton = document.getElementById('logout-button');
    const authStatus = document.getElementById('auth-status');
    const adminGreeting = document.getElementById('admin-greeting');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const adminStatusElement = document.getElementById('admin-status');
    const nextButton = document.getElementById('next-button');
    const emailGroup = document.getElementById('email-group');
    const passwordGroup = document.getElementById('password-group');
    const loginButton = document.getElementById('login-button');
    const timerDisplayElement = document.getElementById('inactivity-timer-display');

    // --- Site Settings Elements ---
    const maintenanceModeToggle = document.getElementById('maintenance-mode-toggle');
    const hideTikTokSectionToggle = document.getElementById('hide-tiktok-section-toggle');
    const settingsStatusMessage = document.getElementById('settings-status-message');
    const countdownTitleInput = document.getElementById('countdown-title-input');
    const countdownDatetimeInput = document.getElementById('countdown-datetime-input');
    const saveCountdownSettingsButton = document.getElementById('save-countdown-settings-button');
    const countdownExpiredMessageInput = document.getElementById('countdown-expired-message-input');

    // --- Profile Management Elements ---
    const profileForm = document.getElementById('profile-form');
    const profileUsernameInput = document.getElementById('profile-username');
    const profilePicUrlInput = document.getElementById('profile-pic-url');
    const profileBioInput = document.getElementById('profile-bio');
    const profileStatusInput = document.getElementById('profile-status');
    const profileStatusMessage = document.getElementById('profile-status-message');
    const adminPfpPreview = document.getElementById('admin-pfp-preview');

    // --- Business Info Management Elements ---
    const businessInfoForm = document.getElementById('business-info-form');
    const contactEmailInput = document.getElementById('business-contact-email');
    const regularHoursContainer = document.getElementById('regular-hours-container');
    const holidayHoursList = document.getElementById('holiday-hours-list');
    const temporaryHoursList = document.getElementById('temporary-hours-list');
    const addHolidayButton = document.getElementById('add-holiday-button');
    const addTemporaryButton = document.getElementById('add-temporary-button');
    const businessStatusOverrideSelect = document.getElementById('business-status-override');
    const businessInfoStatusMessage = document.getElementById('business-info-status-message');
    const adminPreviewStatus = document.getElementById('admin-preview-status');
    const adminPreviewHours = document.getElementById('admin-preview-hours');
    const adminPreviewContact = document.getElementById('admin-preview-contact');

    // --- President Management Elements ---
    const presidentForm = document.getElementById('president-form');
    const presidentNameInput = document.getElementById('president-name');
    const presidentBornInput = document.getElementById('president-born');
    const presidentHeightInput = document.getElementById('president-height');
    const presidentPartyInput = document.getElementById('president-party');
    const presidentTermInput = document.getElementById('president-term');
    const presidentVpInput = document.getElementById('president-vp');
    const presidentImageUrlInput = document.getElementById('president-image-url');
    const presidentStatusMessage = document.getElementById('president-status-message');
    const presidentPreviewArea = document.getElementById('president-preview');

    // --- Tech Management Elements ---
    const addTechItemForm = document.getElementById('add-tech-item-form');
    const techItemsListAdmin = document.getElementById('tech-items-list-admin');
    const techItemsCount = document.getElementById('tech-items-count');
    const searchTechItemsInput = document.getElementById('search-tech-items');
    const editTechItemModal = document.getElementById('edit-tech-item-modal');
    const editTechItemForm = document.getElementById('edit-tech-item-form');
    const cancelEditTechButton = document.getElementById('cancel-edit-tech-button');
    const cancelEditTechButtonSecondary = document.getElementById('cancel-edit-tech-button-secondary');
    const editTechStatusMessage = document.getElementById('edit-tech-status-message');
    const addTechItemPreview = document.getElementById('add-tech-item-preview');
    const editTechItemPreview = document.getElementById('edit-tech-item-preview');

    // --- FAQ Management Elements ---
    const addFaqForm = document.getElementById('add-faq-form');
    const faqListAdmin = document.getElementById('faq-list-admin');
    const faqCount = document.getElementById('faq-count');
    const searchFaqInput = document.getElementById('search-faq');
    const editFaqModal = document.getElementById('edit-faq-modal');
    const editFaqForm = document.getElementById('edit-faq-form');
    const cancelEditFaqButton = document.getElementById('cancel-edit-faq-button');
    const cancelEditFaqButtonSecondary = document.getElementById('cancel-edit-faq-button-secondary');
    const editFaqStatusMessage = document.getElementById('edit-faq-status-message');
    const editFaqQuestionInput = document.getElementById('edit-faq-question');
    const editFaqAnswerInput = document.getElementById('edit-faq-answer');
    const editFaqOrderInput = document.getElementById('edit-faq-order');

    // --- Disabilities Management Elements ---
    const addDisabilityForm = document.getElementById('add-disability-form');
    const disabilitiesListAdmin = document.getElementById('disabilities-list-admin');
    const disabilitiesCount = document.getElementById('disabilities-count');
    const searchInputDisabilities = document.getElementById('search-disabilities');
    const editDisabilityModal = document.getElementById('edit-disability-modal');
    const editDisabilityForm = document.getElementById('edit-disability-form');
    const cancelEditDisabilityButton = document.getElementById('cancel-edit-disability-button');
    const cancelEditDisabilityButtonSecondary = document.getElementById('cancel-edit-disability-button-secondary');
    const editDisabilityNameInput = document.getElementById('edit-disability-name');
    const editDisabilityUrlInput = document.getElementById('edit-disability-url');
    const editDisabilityOrderInput = document.getElementById('edit-disability-order');
    const editDisabilityStatusMessage = document.getElementById('edit-disability-status-message');

    // --- Useful Links Elements ---
    const addUsefulLinkForm = document.getElementById('add-useful-link-form');
    const usefulLinksListAdmin = document.getElementById('useful-links-list-admin');
    const usefulLinksCount = document.getElementById('useful-links-count');
    const searchInputUsefulLinks = document.getElementById('search-useful-links');
    const editUsefulLinkModal = document.getElementById('edit-useful-link-modal');
    const editUsefulLinkForm = document.getElementById('edit-useful-link-form');
    const cancelEditLinkButton = document.getElementById('cancel-edit-link-button');
    const cancelEditLinkButtonSecondary = document.getElementById('cancel-edit-link-button-secondary');
    const editLinkLabelInput = document.getElementById('edit-link-label');
    const editLinkUrlInput = document.getElementById('edit-link-url');
    const editLinkOrderInput = document.getElementById('edit-link-order');
    const editLinkStatusMessage = document.getElementById('edit-link-status-message');

    // --- Social Links Elements ---
    const addSocialLinkForm = document.getElementById('add-social-link-form');
    const socialLinksListAdmin = document.getElementById('social-links-list-admin');
    const socialLinksCount = document.getElementById('social-links-count');
    const searchInputSocialLinks = document.getElementById('search-social-links');
    const editSocialLinkModal = document.getElementById('edit-social-link-modal');
    const editSocialLinkForm = document.getElementById('edit-social-link-form');
    const cancelEditSocialLinkButton = document.getElementById('cancel-edit-social-link-button');
    const cancelEditSocialLinkButtonSecondary = document.getElementById('cancel-edit-social-link-button-secondary');
    const editSocialLinkLabelInput = document.getElementById('edit-social-link-label');
    const editSocialLinkUrlInput = document.getElementById('edit-social-link-url');
    const editSocialLinkOrderInput = document.getElementById('edit-social-link-order');
    const editSocialLinkStatusMessage = document.getElementById('edit-social-link-status-message');

    // --- Shoutout Elements ---
    const addShoutoutTiktokForm = document.getElementById('add-shoutout-tiktok-form');
    const shoutoutsTiktokListAdmin = document.getElementById('shoutouts-tiktok-list-admin');
    const addShoutoutInstagramForm = document.getElementById('add-shoutout-instagram-form');
    const shoutoutsInstagramListAdmin = document.getElementById('shoutouts-instagram-list-admin');
    const addShoutoutYoutubeForm = document.getElementById('add-shoutout-youtube-form');
    const shoutoutsYoutubeListAdmin = document.getElementById('shoutouts-youtube-list-admin');
    const searchInputTiktok = document.getElementById('search-tiktok');
    const searchInputInstagram = document.getElementById('search-instagram');
    const searchInputYoutube = document.getElementById('search-youtube');
    const editModal = document.getElementById('edit-shoutout-modal');
    const editForm = document.getElementById('edit-shoutout-form');
    const cancelEditButton = document.getElementById('cancel-edit-button');
    const editUsernameInput = document.getElementById('edit-username');
    const editNicknameInput = document.getElementById('edit-nickname');
    const editOrderInput = document.getElementById('edit-order');
    const editIsVerifiedInput = document.getElementById('edit-isVerified');
    const editBioInput = document.getElementById('edit-bio');
    const editProfilePicInput = document.getElementById('edit-profilePic');
    const editFollowersInput = document.getElementById('edit-followers');
    const editSubscribersInput = document.getElementById('edit-subscribers');
    const editCoverPhotoInput = document.getElementById('edit-coverPhoto');
    const editPlatformSpecificDiv = document.getElementById('edit-platform-specific');
    const addTiktokPreview = document.getElementById('add-tiktok-preview');
    const addInstagramPreview = document.getElementById('add-instagram-preview');
    const addYoutubePreview = document.getElementById('add-youtube-preview');
    const editShoutoutPreview = document.getElementById('edit-shoutout-preview');
    const tiktokCount = document.getElementById('tiktok-count');
    const instagramCount = document.getElementById('instagram-count');
    const youtubeCount = document.getElementById('youtube-count');

    // --- Status Page Management Elements ---
    const statusOverrideSelect = document.getElementById('status-override-select'); // <<< DEFINITION HERE
    const saveStatusOverrideButton = document.getElementById('save-status-override-button');
    const overrideStatusMessage = document.getElementById('override-status-message');

    const addGroupForm = document.getElementById('add-group-form'); // <<< DEFINITION HERE
    const groupsListAdminContainer = document.getElementById('groups-list-admin');
    const groupsCountAdmin = document.getElementById('groups-count-admin');
    const editGroupModal = document.getElementById('edit-group-modal');
    const editGroupForm = document.getElementById('edit-group-form'); // <<< DEFINITION HERE
    const cancelEditGroupButton = document.getElementById('cancel-edit-group-button');
    const cancelEditGroupButtonSecondary = document.getElementById('cancel-edit-group-button-secondary');
    const editGroupNameInput = document.getElementById('edit-group-name');
    const editGroupOrderInput = document.getElementById('edit-group-order');
    const editGroupCollapsedInput = document.getElementById('edit-group-collapsed');
    const editGroupStatusMessage = document.getElementById('edit-group-status-message');

    const addComponentForm = document.getElementById('add-component-form'); // <<< DEFINITION HERE
    const componentGroupSelect = document.getElementById('component-group-select');
    const componentsListAdminContainer = document.getElementById('components-list-admin');
    const componentsCountAdmin = document.getElementById('components-count-admin');
    const editComponentModal = document.getElementById('edit-component-modal');
    const editComponentForm = document.getElementById('edit-component-form'); // <<< DEFINITION HERE
    const cancelEditComponentButton = document.getElementById('cancel-edit-component-button');
    const cancelEditComponentButtonSecondary = document.getElementById('cancel-edit-component-button-secondary');
    const editComponentNameInput = document.getElementById('edit-component-name');
    const editComponentDescriptionInput = document.getElementById('edit-component-description');
    const editComponentGroupSelect = document.getElementById('edit-component-group-select');
    const editComponentOrderInput = document.getElementById('edit-component-order');
    const editComponentStatusMessage = document.getElementById('edit-component-status-message');

    const addIncidentForm = document.getElementById('add-incident-form'); // <<< DEFINITION HERE
    const incidentAffectedComponentsContainer = document.getElementById('incident-affected-components-container');
    const incidentStartTimeOptionNow = document.getElementById('start-now');
    const incidentStartTimeOptionSpecific = document.getElementById('start-specific');
    const incidentStartDateTimeField = document.getElementById('incident-start-datetime');
    const activeIncidentsListAdminContainer = document.getElementById('active-incidents-list-admin');
    const activeIncidentsCountAdmin = document.getElementById('active-incidents-count-admin');

    const updateIncidentModal = document.getElementById('update-incident-modal');
    const updateIncidentForm = document.getElementById('update-incident-form'); // <<< DEFINITION HERE
    const updateIncidentModalTitle = document.getElementById('update-incident-modal-title');
    const incidentPreviousUpdatesContainer = document.getElementById('incident-previous-updates');
    const incidentNewUpdateInput = document.getElementById('incident-new-update');
    const incidentNewStatusSelect = document.getElementById('incident-new-status');
    const cancelUpdateIncidentButton = document.getElementById('cancel-update-incident-button');
    const cancelUpdateIncidentButtonSecondary = document.getElementById('cancel-update-incident-button-secondary');
    const updateIncidentStatusMessage = document.getElementById('update-incident-status-message');

    const addMaintenanceForm = document.getElementById('add-maintenance-form'); // <<< DEFINITION HERE
    const maintenanceAffectedComponentsContainer = document.getElementById('maintenance-affected-components-container');
    const maintenanceListAdminContainer = document.getElementById('maintenance-list-admin');
    const maintenanceCountAdmin = document.getElementById('maintenance-count-admin');
    const editMaintenanceModal = document.getElementById('edit-maintenance-modal');
    const editMaintenanceForm = document.getElementById('edit-maintenance-form'); // <<< DEFINITION HERE
    const cancelEditMaintenanceButton = document.getElementById('cancel-edit-maintenance-button');
    const cancelEditMaintenanceButtonSecondary = document.getElementById('cancel-edit-maintenance-button-secondary');
    const editMaintenanceTitleInput = document.getElementById('edit-maintenance-title');
    const editMaintenanceDescriptionInput = document.getElementById('edit-maintenance-description');
    const editMaintenanceStartTimeInput = document.getElementById('edit-maintenance-start-time');
    const editMaintenanceEndTimeInput = document.getElementById('edit-maintenance-end-time');
    const editMaintenanceAffectedComponentsContainer = document.getElementById('edit-maintenance-affected-components-container');
    const editMaintenanceStatusSelect = document.getElementById('edit-maintenance-status');
    const maintenancePreviousUpdatesContainer = document.getElementById('maintenance-previous-updates');
    const maintenanceNewUpdateInput = document.getElementById('maintenance-new-update');
    const editMaintenanceStatusMessage = document.getElementById('edit-maintenance-status-message');

    // --- Activity Log Elements ---
    const clearLogBtn = document.getElementById('clear-log-button');
    const logListContainer = document.getElementById('activity-log-list');
    const logCountElement = document.getElementById('activity-log-count');
    const searchActivityLogInput = document.getElementById('search-activity-log');


    // ============================================================
    // SECTION 3: HELPER FUNCTIONS
    // ============================================================
    function showAdminStatus(message, isError = false) { if (!adminStatusElement) { console.warn("Admin status element not found"); return; } adminStatusElement.textContent = message; adminStatusElement.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (adminStatusElement) { adminStatusElement.textContent = ''; adminStatusElement.className = 'status-message'; } }, 5000); }
    function showProfileStatus(message, isError = false) { if (!profileStatusMessage) { console.warn("Profile status message element not found"); showAdminStatus(message, isError); return; } profileStatusMessage.textContent = message; profileStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (profileStatusMessage) { profileStatusMessage.textContent = ''; profileStatusMessage.className = 'status-message'; } }, 5000); }
    function showSettingsStatus(message, isError = false) { if (!settingsStatusMessage) { console.warn("Settings status message element not found"); showAdminStatus(message, isError); return; } settingsStatusMessage.textContent = message; settingsStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (settingsStatusMessage) { settingsStatusMessage.textContent = ''; settingsStatusMessage.style.display = 'none'; } }, 3000); settingsStatusMessage.style.display = 'block'; }
    function showEditLinkStatus(message, isError = false) { if (!editLinkStatusMessage) { console.warn("Edit link status message element not found"); return; } editLinkStatusMessage.textContent = message; editLinkStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (editLinkStatusMessage) { editLinkStatusMessage.textContent = ''; editLinkStatusMessage.className = 'status-message'; } }, 3000); }
    function showEditSocialLinkStatus(message, isError = false) { if (!editSocialLinkStatusMessage) { console.warn("Edit social link status message element not found"); return; } editSocialLinkStatusMessage.textContent = message; editSocialLinkStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (editSocialLinkStatusMessage) { editSocialLinkStatusMessage.textContent = ''; editSocialLinkStatusMessage.className = 'status-message'; } }, 3000); }
    function showEditDisabilityStatus(message, isError = false) { if (!editDisabilityStatusMessage) { console.warn("Edit disability status message element not found"); return; } editDisabilityStatusMessage.textContent = message; editDisabilityStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (editDisabilityStatusMessage) { editDisabilityStatusMessage.textContent = ''; editDisabilityStatusMessage.className = 'status-message'; } }, 3000); }
    function showEditFaqStatus(message, isError = false) { if (!editFaqStatusMessage) { console.warn("Edit FAQ status message element not found"); return; } editFaqStatusMessage.textContent = message; editFaqStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; if (!isError) { setTimeout(() => { if (editFaqStatusMessage && editFaqStatusMessage.textContent === message) { editFaqStatusMessage.textContent = ''; editFaqStatusMessage.className = 'status-message'; } }, 3000); } }
    function showEditTechItemStatus(message, isError = false) { if (!editTechStatusMessage) { console.warn("Edit tech status message element not found"); return; } editTechStatusMessage.textContent = message; editTechStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; if (!isError) setTimeout(() => { if (editTechStatusMessage && editTechStatusMessage.textContent === message) { editTechStatusMessage.textContent = ''; editTechStatusMessage.className = 'status-message'; } }, 3000); }
    function formatAdminTimestamp(firestoreTimestamp) { if (!firestoreTimestamp || typeof firestoreTimestamp.toDate !== 'function') return 'N/A'; try { const date = firestoreTimestamp.toDate(); return date.toLocaleString(navigator.language || 'en-US', { dateStyle: 'medium', timeStyle: 'short' }); } catch (error) { console.error("Error formatting admin timestamp:", error); return 'Invalid Date'; } }
    function getStatusClassAdmin(status) { if (!status) return 'status-unknown'; return `status-${status.toLowerCase().replace(/\s+/g, '-')}`; }
    function showEditComponentStatus(message, isError = false) { if (!editComponentStatusMessage) return; editComponentStatusMessage.textContent = message; editComponentStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (editComponentStatusMessage) { editComponentStatusMessage.textContent = ''; editComponentStatusMessage.className = 'status-message'; } }, 3000); }
    function showUpdateIncidentStatus(message, isError = false) { if (!updateIncidentStatusMessage) return; updateIncidentStatusMessage.textContent = message; updateIncidentStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; if (!isError) { setTimeout(() => { if (updateIncidentStatusMessage) { updateIncidentStatusMessage.textContent = ''; updateIncidentStatusMessage.className = 'status-message'; } }, 3000); } }
    function showEditMaintenanceStatus(message, isError = false) { if (!editMaintenanceStatusMessage) return; editMaintenanceStatusMessage.textContent = message; editMaintenanceStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; if (!isError) { setTimeout(() => { if (editMaintenanceStatusMessage) { editMaintenanceStatusMessage.textContent = ''; editMaintenanceStatusMessage.className = 'status-message'; } }, 3000); } }
    function showOverrideStatus(message, isError = false) { if (!overrideStatusMessage) { console.warn("Override status message element not found"); return; } overrideStatusMessage.textContent = message; overrideStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (overrideStatusMessage) { overrideStatusMessage.textContent = ''; overrideStatusMessage.className = 'status-message'; } }, 3000); }
    function datetimeLocalToTimestamp(dateTimeString) { if (!dateTimeString) return null; try { return Timestamp.fromDate(new Date(dateTimeString)); } catch (e) { console.error("Error converting datetime-local string to Timestamp:", e); return null; } }
    function timestampToDatetimeLocal(timestamp) { if (!timestamp || typeof timestamp.toDate !== 'function') return ''; try { const date = timestamp.toDate(); const year = date.getFullYear(); const month = String(date.getMonth() + 1).padStart(2, '0'); const day = String(date.getDate()).padStart(2, '0'); const hours = String(date.getHours()).padStart(2, '0'); const minutes = String(date.getMinutes()).padStart(2, '0'); return `${year}-${month}-${day}T${hours}:${minutes}`; } catch (e) { console.error("Error converting Timestamp to datetime-local string:", e); return ''; } }
    function capitalizeFirstLetter(string) { if (!string) return ''; return string.charAt(0).toUpperCase() + string.slice(1); }
    function formatTimeForAdminPreview(timeString) { if (!timeString || typeof timeString !== 'string' || !timeString.includes(':')) return ''; try { const [hour, minute] = timeString.split(':'); const hourNum = parseInt(hour, 10); if (isNaN(hourNum)) return timeString; const ampm = hourNum >= 12 ? 'PM' : 'AM'; const hour12 = hourNum % 12 || 12; return `${hour12}:${minute} ${ampm}`; } catch (e) { console.error("Error formatting time:", timeString, e); return timeString; } }
    function timeStringToMinutesBI(timeStr) { if (!timeStr || typeof timeStr !== 'string' || !timeStr.includes(':')) return null; try { const [hours, minutes] = timeStr.split(':').map(Number); if (isNaN(hours) || isNaN(minutes)) return null; return hours * 60 + minutes; } catch (e) { console.error("Preview Error: converting time string to minutes:", timeStr, e); return null; } }
    function addListenerSafe(element, eventType, handler, flagSuffix = '') { if (!element) { return; } const listenerFlag = `__listener_${eventType}${flagSuffix}`; if (!element[listenerFlag]) { element.addEventListener(eventType, handler); element[listenerFlag] = true; } }
    function showEditGroupStatus(message, isError = false) { if (!editGroupStatusMessage) return; editGroupStatusMessage.textContent = message; editGroupStatusMessage.className = `status-message ${isError ? 'error' : 'success'}`; setTimeout(() => { if (editGroupStatusMessage) { editGroupStatusMessage.textContent = ''; editGroupStatusMessage.className = 'status-message'; } }, 3000); }
    function logAdminActivity(actionType, details = {}) { console.warn("logAdminActivity function needs implementation if logging is desired."); /* Implement logging logic here if needed */ }
    function handleClearActivityLog() { console.warn("handleClearActivityLog function needs implementation."); /* Implement clear logic here if needed */ }
    function renderLogEntry(logData) { console.warn("renderLogEntry function needs implementation."); return document.createElement('div'); /* Implement render logic here */ }


    // ============================================================
    // SECTION 4: RENDERING FUNCTIONS (for lists and previews)
    // ============================================================
    // ... (Keep ALL render functions here) ...
    function renderAdminListItem(container, docId, platform, itemData, deleteHandler, editHandler) { if (!container) { console.warn("List container not found for platform:", platform); return; } const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); const nickname = itemData.nickname || 'N/A'; const username = itemData.username || 'N/A'; const order = itemData.order ?? 'N/A'; const isVerified = itemData.isVerified || false; let countText = ''; if (platform === 'youtube') { const subscribers = itemData.subscribers || 'N/A'; countText = `Subs: ${subscribers}`; } else if (platform === 'tiktok' || platform === 'instagram') { const followers = itemData.followers || 'N/A'; countText = `Followers: ${followers}`; } let directLinkUrl = '#'; let safeUsername = username || ''; if (platform === 'tiktok' && safeUsername) { directLinkUrl = `https://tiktok.com/@${encodeURIComponent(safeUsername)}`; } else if (platform === 'instagram' && safeUsername) { directLinkUrl = `https://instagram.com/${encodeURIComponent(safeUsername)}`; } else if (platform === 'youtube' && safeUsername) { let youtubeHandle = safeUsername.startsWith('@') ? safeUsername : `@${safeUsername}`; directLinkUrl = `https://www.youtube.com/${encodeURIComponent(youtubeHandle)}`; } const verifiedIndicator = isVerified ? '<span class="verified-indicator" title="Verified">✅</span>' : ''; itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${nickname}</strong> ${verifiedIndicator} <span>(@${username})</span><small>Order: ${order} | ${countText}</small></div></div><div class="item-actions"><a href="${directLinkUrl}" target="_blank" rel="noopener noreferrer" class="direct-link small-button" title="Visit Profile/Channel"><i class="fas fa-external-link-alt"></i> Visit</a><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId, platform)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, platform, itemDiv)); container.appendChild(itemDiv); }
    function renderTikTokCard(account) { const profilePic = account.profilePic || 'images/default-profile.jpg'; const username = account.username || 'N/A'; const nickname = account.nickname || 'N/A'; const bio = account.bio || ''; const followers = account.followers || 'N/A'; const isVerified = account.isVerified || false; const profileUrl = username !== 'N/A' ? `https://tiktok.com/@${encodeURIComponent(username)}` : '#'; const verifiedBadge = isVerified ? '<img src="check.png" alt="Verified" class="verified-badge">' : ''; return `<div class="creator-card"><img src="${profilePic}" alt="@${username}" class="creator-pic" onerror="this.onerror=null; this.src='images/default-profile.jpg';"><div class="creator-info"><div class="creator-header"><h3>${nickname} ${verifiedBadge}</h3></div><p class="creator-username">@${username}</p><p class="creator-bio">${bio}</p><p class="follower-count">${followers} Followers</p><a href="${profileUrl}" target="_blank" rel="noopener noreferrer" class="visit-profile"> Visit Profile </a></div></div>`; }
    function renderInstagramCard(account) { const profilePic = account.profilePic || 'images/default-profile.jpg'; const username = account.username || 'N/A'; const nickname = account.nickname || 'N/A'; const bio = account.bio || ''; const followers = account.followers || 'N/A'; const isVerified = account.isVerified || false; const profileUrl = username !== 'N/A' ? `https://instagram.com/${encodeURIComponent(username)}` : '#'; const verifiedBadge = isVerified ? '<img src="instagramcheck.png" alt="Verified" class="instagram-verified-badge">' : ''; return `<div class="instagram-creator-card"><img src="${profilePic}" alt="${nickname}" class="instagram-creator-pic" onerror="this.onerror=null; this.src='images/default-profile.jpg';"><div class="instagram-creator-info"><div class="instagram-creator-header"><h3>${nickname} ${verifiedBadge}</h3></div><p class="instagram-creator-username">@${username}</p><p class="instagram-creator-bio">${bio}</p><p class="instagram-follower-count">${followers} Followers</p><a href="${profileUrl}" target="_blank" rel="noopener noreferrer" class="instagram-visit-profile"> Visit Profile </a></div></div>`; }
    function renderYouTubeCard(account) { const profilePic = account.profilePic || 'images/default-profile.jpg'; const username = account.username || 'N/A'; const nickname = account.nickname || 'N/A'; const bio = account.bio || ''; const subscribers = account.subscribers || 'N/A'; const coverPhoto = account.coverPhoto || null; const isVerified = account.isVerified || false; let safeUsername = username; if (username !== 'N/A' && !username.startsWith('@')) { safeUsername = `@${username}`; } const channelUrl = username !== 'N/A' ? `https://www.youtube.com/${encodeURIComponent(safeUsername)}` : '#'; const verifiedBadge = isVerified ? '<img src="youtubecheck.png" alt="Verified" class="youtube-verified-badge">' : ''; return `<div class="youtube-creator-card">${coverPhoto ? `<img src="${coverPhoto}" alt="${nickname} Cover Photo" class="youtube-cover-photo" onerror="this.style.display='none'">` : ''}<img src="${profilePic}" alt="${nickname}" class="youtube-creator-pic" onerror="this.onerror=null; this.src='images/default-profile.jpg';"><div class="youtube-creator-info"><div class="youtube-creator-header"><h3>${nickname} ${verifiedBadge}</h3></div><div class="username-container"><p class="youtube-creator-username">${safeUsername}</p></div><p class="youtube-creator-bio">${bio}</p><p class="youtube-subscriber-count">${subscribers} Subscribers</p><a href="${channelUrl}" target="_blank" rel="noopener noreferrer" class="youtube-visit-profile"> Visit Channel </a></div></div>`; }
    function renderTechItemHomepage(itemData) { const name = itemData.name || 'Unnamed Device'; const model = itemData.model || ''; const iconClass = itemData.iconClass || 'fas fa-question-circle'; const material = itemData.material || ''; const storage = itemData.storage || ''; const batteryCapacity = itemData.batteryCapacity || ''; const color = itemData.color || ''; const price = itemData.price ? `$${itemData.price}` : ''; const dateReleased = itemData.dateReleased || ''; const dateBought = itemData.dateBought || ''; const osVersion = itemData.osVersion || ''; const batteryHealth = itemData.batteryHealth !== null && !isNaN(itemData.batteryHealth) ? parseInt(itemData.batteryHealth, 10) : null; const batteryCycles = itemData.batteryCycles !== null && !isNaN(itemData.batteryCycles) ? itemData.batteryCycles : null; let batteryHtml = ''; if (batteryHealth !== null) { let batteryClass = ''; if (batteryHealth <= 20) batteryClass = 'critical'; else if (batteryHealth <= 50) batteryClass = 'low-power'; const displayHealth = Math.min(batteryHealth, 100); batteryHtml = `<div class="tech-detail"><i class="fas fa-heart"></i><span>Battery Health:</span></div><div class="battery-container"><div class="battery-icon ${batteryClass}"><div class="battery-level" style="width: ${displayHealth}%;"></div><div class="battery-percentage">${batteryHealth}%</div></div></div>`; } let cyclesHtml = ''; if (batteryCycles !== null) { cyclesHtml = `<div class="tech-detail"><i class="fas fa-sync"></i><span>Battery Charge Cycles:</span> ${batteryCycles}</div>`; } return `<div class="tech-item"><h3><i class="${iconClass}"></i> ${name}</h3> ${model ? `<div class="tech-detail"><i class="fas fa-info-circle"></i><span>Model:</span> ${model}</div>` : ''} ${material ? `<div class="tech-detail"><i class="fas fa-layer-group"></i><span>Material:</span> ${material}</div>` : ''} ${storage ? `<div class="tech-detail"><i class="fas fa-hdd"></i><span>Storage:</span> ${storage}</div>` : ''} ${batteryCapacity ? `<div class="tech-detail"><i class="fas fa-battery-full"></i><span>Battery Capacity:</span> ${batteryCapacity}</div>` : ''} ${color ? `<div class="tech-detail"><i class="fas fa-palette"></i><span>Color:</span> ${color}</div>` : ''} ${price ? `<div class="tech-detail"><i class="fas fa-tag"></i><span>Price:</span> ${price}</div>` : ''} ${dateReleased ? `<div class="tech-detail"><i class="fas fa-calendar-plus"></i><span>Date Released:</span> ${dateReleased}</div>` : ''} ${dateBought ? `<div class="tech-detail"><i class="fas fa-shopping-cart"></i><span>Date Bought:</span> ${dateBought}</div>` : ''} ${osVersion ? `<div class="tech-detail"><i class="fab fa-apple"></i><span>OS Version:</span> ${osVersion}</div>` : ''} ${batteryHtml} ${cyclesHtml} </div>`; }
    function renderFaqItemHomepage(faqData) { const question = faqData.question || 'No Question Provided'; const answerHtml = faqData.answer ? (faqData.answer.includes('<') ? faqData.answer : `<p>${faqData.answer}</p>`) : '<p>No Answer Provided.</p>'; return `<div class="faq-item"><button class="faq-question">${question}<span class="faq-icon">+</span></button><div class="faq-answer">${answerHtml}</div></div>`; }
    function renderUsefulLinkAdminListItem(container, docId, label, url, order, deleteHandler, editHandler) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${label || 'N/A'}</strong><span>(${url || 'N/A'})</span><small>Order: ${order ?? 'N/A'}</small></div></div><div class="item-actions"><a href="${url || '#'}" target="_blank" rel="noopener noreferrer" class="direct-link small-button" title="Visit Link"><i class="fas fa-external-link-alt"></i> Visit</a><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, itemDiv)); container.appendChild(itemDiv); }
    function renderSocialLinkAdminListItem(container, docId, label, url, order, deleteHandler, editHandler) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); let displayUrl = url || 'N/A'; let visitUrl = '#'; try { if (url) { visitUrl = new URL(url).href; } } catch (e) { displayUrl += " (Invalid URL)"; } itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${label || 'N/A'}</strong><span>(${displayUrl})</span><small>Order: ${order ?? 'N/A'}</small></div></div><div class="item-actions"><a href="${visitUrl}" target="_blank" rel="noopener noreferrer" class="direct-link small-button" title="Visit Link" ${visitUrl === '#' ? 'style="pointer-events: none; opacity: 0.5;"' : ''}><i class="fas fa-external-link-alt"></i> Visit</a><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, itemDiv)); container.appendChild(itemDiv); }
    function renderDisabilityAdminListItem(container, docId, name, url, order, deleteHandler, editHandler) { if (!container) { console.warn("Disabilities list container not found during render."); return; } const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); let displayUrl = url || 'N/A'; let visitUrl = '#'; try { if (url) { visitUrl = new URL(url).href; } } catch (e) { console.warn(`Invalid URL for disability link ${docId}: ${url}`); displayUrl += " (Invalid URL)"; } itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${name || 'N/A'}</strong><span>(${displayUrl})</span><small>Order: ${order ?? 'N/A'}</small></div></div><div class="item-actions"><a href="${visitUrl}" target="_blank" rel="noopener noreferrer" class="direct-link small-button" title="Visit Info Link" ${visitUrl === '#' ? 'style="pointer-events: none; opacity: 0.5;"' : ''}><i class="fas fa-external-link-alt"></i> Visit</a><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, itemDiv)); container.appendChild(itemDiv); }
    function renderTechItemAdminListItem(container, docId, itemData, deleteHandler, editHandler) { if (!container) { console.warn("Tech list container missing for render"); return; } const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${itemData.name || 'N/A'}</strong><span>(${itemData.model || 'N/A'})</span><small>Order: ${itemData.order ?? 'N/A'} | OS: ${itemData.osVersion || '?'}</small></div></div><div class="item-actions"><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, itemDiv)); container.appendChild(itemDiv); }
    function renderFaqAdminListItem(container, docId, faqData, deleteHandler, editHandler) { if (!container) { console.warn("FAQ list container missing"); return; } const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin'; itemDiv.setAttribute('data-id', docId); const shortAnswer = (faqData.answer || '').substring(0, 100); itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><p><strong>Question:</strong> ${faqData.question || 'N/A'}</p><p style="opacity: 0.8;"><strong>Answer Snippet:</strong> ${shortAnswer}${(faqData.answer || '').length > 100 ? '...' : ''}</p><small>Order: ${faqData.order ?? 'N/A'}</small></div></div><div class="item-actions"><button type="button" class="edit-button small-button">Edit</button><button type="button" class="delete-button small-button">Delete</button></div>`; const editButton = itemDiv.querySelector('.edit-button'); if (editButton) editButton.addEventListener('click', () => editHandler(docId)); const deleteButton = itemDiv.querySelector('.delete-button'); if (deleteButton) deleteButton.addEventListener('click', () => deleteHandler(docId, itemDiv)); container.appendChild(itemDiv); }
    function renderPresidentPreview(data) { const name = data.name || 'N/A'; const born = data.born || 'N/A'; const height = data.height || 'N/A'; const party = data.party || 'N/A'; const term = data.term || 'N/A'; const vp = data.vp || 'N/A'; const imageUrl = data.imageUrl || 'images/default-president.jpg'; return `<section class="president-section"><div class="president-info"><img src="${imageUrl}" alt="President ${name}" class="president-photo" onerror="this.onerror=null; this.src='images/default-president.jpg'; this.alt='Photo Missing';"><div class="president-details"><h3 class="president-name">${name}</h3><p><strong>Born:</strong> ${born}</p><p><strong>Height:</strong> ${height}</p><p><strong>Party:</strong> ${party}</p><p class="presidential-term"><strong>Term:</strong> ${term}</p><p><strong>VP:</strong> ${vp}</p></div></div></section>`; }
    function renderTechItemPreview(data) { const name = data.name || 'Device Name'; const model = data.model || ''; const iconClass = data.iconClass || 'fas fa-question-circle'; const material = data.material || ''; const storage = data.storage || ''; const batteryCapacity = data.batteryCapacity || ''; const color = data.color || ''; const price = data.price ? `$${data.price}` : ''; const dateReleased = data.dateReleased || ''; const dateBought = data.dateBought || ''; const osVersion = data.osVersion || ''; const batteryHealth = data.batteryHealth !== null && !isNaN(data.batteryHealth) ? parseInt(data.batteryHealth, 10) : null; const batteryCycles = data.batteryCycles !== null && !isNaN(data.batteryCycles) ? data.batteryCycles : null; let batteryHtml = ''; if (batteryHealth !== null) { let batteryClass = ''; if (batteryHealth <= 20) batteryClass = 'critical'; else if (batteryHealth <= 50) batteryClass = 'low-power'; const displayHealth = Math.min(batteryHealth, 100); batteryHtml = `<div class="tech-detail"><i class="fas fa-heart"></i><span>Battery Health:</span></div><div class="battery-container"><div class="battery-icon ${batteryClass}"><div class="battery-level" style="width: ${displayHealth}%;"></div><div class="battery-percentage">${batteryHealth}%</div></div></div>`; } let cyclesHtml = ''; if (batteryCycles !== null) { cyclesHtml = `<div class="tech-detail"><i class="fas fa-sync"></i><span>Battery Charge Cycles:</span> ${batteryCycles}</div>`; } return `<div class="tech-item"><h3><i class="${iconClass}"></i> ${name}</h3> ${model ? `<div class="tech-detail"><i class="fas fa-info-circle"></i><span>Model:</span> ${model}</div>` : ''} ${material ? `<div class="tech-detail"><i class="fas fa-layer-group"></i><span>Material:</span> ${material}</div>` : ''} ${storage ? `<div class="tech-detail"><i class="fas fa-hdd"></i><span>Storage:</span> ${storage}</div>` : ''} ${batteryCapacity ? `<div class="tech-detail"><i class="fas fa-battery-full"></i><span>Battery Capacity:</span> ${batteryCapacity}</div>` : ''} ${color ? `<div class="tech-detail"><i class="fas fa-palette"></i><span>Color:</span> ${color}</div>` : ''} ${price ? `<div class="tech-detail"><i class="fas fa-tag"></i><span>Price:</span> ${price}</div>` : ''} ${dateReleased ? `<div class="tech-detail"><i class="fas fa-calendar-plus"></i><span>Date Released:</span> ${dateReleased}</div>` : ''} ${dateBought ? `<div class="tech-detail"><i class="fas fa-shopping-cart"></i><span>Date Bought:</span> ${dateBought}</div>` : ''} ${osVersion ? `<div class="tech-detail"><i class="fab fa-apple"></i><span>OS Version:</span> ${osVersion}</div>` : ''} ${batteryHtml} ${cyclesHtml} </div>`; }
    function renderGroupAdminListItem(container, docId, groupData) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin group-admin-item'; itemDiv.setAttribute('data-id', docId); itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${groupData.name || 'N/A'}</strong><span>${groupData.isCollapsedByDefault ? 'Collapsed by Default' : 'Expanded by Default'}</span><small>Order: ${groupData.order ?? 'N/A'}</small></div></div><div class="item-actions"><button type="button" class="edit-group-button small-button" data-doc-id="${docId}">Edit</button><button type="button" class="delete-group-button small-button" data-doc-id="${docId}">Delete</button></div>`; container.appendChild(itemDiv); }
    function renderComponentAdminListItem(container, docId, componentData) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin component-admin-item'; itemDiv.setAttribute('data-id', docId); itemDiv.setAttribute('data-status', componentData.currentStatus || 'Unknown'); const statusClass = getStatusClassAdmin(componentData.currentStatus); const statusOptions = ["Operational", "Under Maintenance", "Degraded Performance", "Partial Outage", "Major Outage"]; let selectOptions = ''; statusOptions.forEach(opt => { const selected = (opt === componentData.currentStatus) ? 'selected' : ''; selectOptions += `<option value="${opt}" ${selected}>${opt}</option>`; }); const group = allStatusGroups.find(g => g.id === componentData.groupId); const groupName = group ? group.name : 'Ungrouped'; itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${componentData.name || 'N/A'}</strong><span>${componentData.description || 'No description'}</span><small>Group: ${groupName} | Order: ${componentData.order ?? 'N/A'}</small></div><div class="component-status-controls"><span class="component-current-status ${statusClass}">${componentData.currentStatus || 'Unknown'}</span><select class="component-status-quick-change small-button" aria-label="Change Status for ${componentData.name || 'this component'}" data-doc-id="${docId}"><option value="">-- Change Status --</option>${selectOptions}</select></div></div><div class="item-actions"><button type="button" class="edit-component-button small-button" data-doc-id="${docId}">Edit</button><button type="button" class="delete-component-button small-button" data-doc-id="${docId}">Delete</button></div>`; container.appendChild(itemDiv); }
    function renderIncidentAdminListItem(container, docId, incidentData) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin incident-admin-item'; itemDiv.setAttribute('data-id', docId); const status = incidentData.status || 'Unknown'; const statusClass = getStatusClassAdmin(status); const lastUpdate = incidentData.updates && incidentData.updates.length > 0 ? incidentData.updates[incidentData.updates.length - 1] : null; const lastUpdateMessage = lastUpdate ? lastUpdate.message : 'No updates yet.'; const affected = incidentData.affectedComponents?.join(', ') || 'None listed'; itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${incidentData.title || 'Untitled Incident'}</strong><span class="incident-current-status ${statusClass}">${status}</span><small>Affected: ${affected} | Opened: ${formatAdminTimestamp(incidentData.createdAt)}</small><p>${lastUpdateMessage.substring(0, 100)}${lastUpdateMessage.length > 100 ? '...' : ''}</p></div></div><div class="item-actions"><button type="button" class="update-incident-button small-button" data-doc-id="${docId}">Add Update / Change Status</button><button type="button" class="resolve-incident-button small-button" data-doc-id="${docId}">Mark Resolved</button></div>`; container.appendChild(itemDiv); }
    function renderMaintenanceAdminListItem(container, docId, maintData) { if (!container) return; const itemDiv = document.createElement('div'); itemDiv.className = 'list-item-admin maintenance-admin-item'; itemDiv.setAttribute('data-id', docId); const status = maintData.status || 'Scheduled'; const statusClass = getStatusClassAdmin(status); const affected = maintData.affectedComponents?.join(', ') || 'None listed'; itemDiv.innerHTML = `<div class="item-content"><div class="item-details"><strong>${maintData.title || 'Untitled Maintenance'}</strong><span class="maintenance-current-status ${statusClass}">${status}</span><small>Starts: ${formatAdminTimestamp(maintData.startTime)} | Ends: ${formatAdminTimestamp(maintData.endTime)}</small><small>Affected: ${affected}</small><p>${(maintData.description || '').substring(0, 100)}${(maintData.description || '').length > 100 ? '...' : ''}</p></div></div><div class="item-actions"><button type="button" class="edit-maintenance-button small-button" data-doc-id="${docId}">Edit / Add Update</button><button type="button" class="delete-maintenance-button small-button" data-doc-id="${docId}">Delete</button></div>`; container.appendChild(itemDiv); }


    // ============================================================
    // SECTION 5: PREVIEW UPDATE FUNCTIONS
    // ============================================================
    function updateShoutoutPreview(formType, platform) { let formElement; let previewElement; let accountData = {}; if (formType === 'add') { formElement = document.getElementById(`add-shoutout-${platform}-form`); previewElement = document.getElementById(`add-${platform}-preview`); } else if (formType === 'edit') { formElement = editForm; previewElement = editShoutoutPreview; if (editForm.getAttribute('data-platform') !== platform) { if(previewElement) previewElement.innerHTML = '<p><small>Preview unavailable.</small></p>'; return; } } else { console.error("Invalid formType:", formType); return; } if (!formElement || !previewElement) { console.error(`Preview Error: Missing elements for ${formType} ${platform}`); return; } try { accountData.username = formElement.querySelector(`[name="username"]`)?.value.trim() || ''; accountData.nickname = formElement.querySelector(`[name="nickname"]`)?.value.trim() || ''; accountData.bio = formElement.querySelector(`[name="bio"]`)?.value.trim() || ''; accountData.profilePic = formElement.querySelector(`[name="profilePic"]`)?.value.trim() || ''; accountData.isVerified = formElement.querySelector(`[name="isVerified"]`)?.checked || false; accountData.order = parseInt(formElement.querySelector(`[name="order"]`)?.value.trim() || 0); if (platform === 'youtube') { accountData.subscribers = formElement.querySelector(`[name="subscribers"]`)?.value.trim() || 'N/A'; accountData.coverPhoto = formElement.querySelector(`[name="coverPhoto"]`)?.value.trim() || null; } else { accountData.followers = formElement.querySelector(`[name="followers"]`)?.value.trim() || 'N/A'; } } catch(e) { console.error("Error reading form values:", e); previewElement.innerHTML = '<p class="error"><small>Error reading form.</small></p>'; return; } let renderFunction; switch (platform) { case 'tiktok': renderFunction = renderTikTokCard; break; case 'instagram': renderFunction = renderInstagramCard; break; case 'youtube': renderFunction = renderYouTubeCard; break; default: console.error("Invalid platform:", platform); previewElement.innerHTML = '<p class="error"><small>Invalid platform.</small></p>'; return; } if (typeof renderFunction === 'function') { try { const cardHTML = renderFunction(accountData); previewElement.innerHTML = cardHTML; } catch (e) { console.error(`Error rendering preview:`, e); previewElement.innerHTML = '<p class="error"><small>Error rendering preview.</small></p>'; } } else { console.error(`Render function missing for ${platform}!`); previewElement.innerHTML = '<p class="error"><small>Preview engine error.</small></p>'; } }
    function updatePresidentPreview() { if (!presidentForm || !presidentPreviewArea) return; const presidentData = { name: presidentNameInput?.value.trim() || "", born: presidentBornInput?.value.trim() || "", height: presidentHeightInput?.value.trim() || "", party: presidentPartyInput?.value.trim() || "", term: presidentTermInput?.value.trim() || "", vp: presidentVpInput?.value.trim() || "", imageUrl: presidentImageUrlInput?.value.trim() || "" }; try { if (typeof renderPresidentPreview === 'function') { const previewHTML = renderPresidentPreview(presidentData); presidentPreviewArea.innerHTML = previewHTML; } else { console.error("renderPresidentPreview function missing!"); presidentPreviewArea.innerHTML = '<p class="error"><small>Preview error.</small></p>'; } } catch (e) { console.error("Error rendering president preview:", e); presidentPreviewArea.innerHTML = '<p class="error"><small>Error generating preview.</small></p>'; } }
    function updateTechItemPreview(formType) { let formElement; let previewElement; if (formType === 'add') { formElement = addTechItemForm; previewElement = addTechItemPreview; } else if (formType === 'edit') { formElement = editTechItemForm; previewElement = editTechItemPreview; } else { return; } if (!formElement || !previewElement) { return; } const techData = {}; const inputs = formElement.querySelectorAll('input[name], select[name], textarea[name]'); inputs.forEach(input => { const name = input.name; let value = input.value.trim(); if (input.type === 'number') { value = input.value === '' ? null : parseFloat(input.value); if (isNaN(value)) value = null; } techData[name] = value === '' ? null : value; }); try { const previewHTML = renderTechItemPreview(techData); previewElement.innerHTML = previewHTML; } catch (e) { console.error("Error rendering tech preview:", e); previewElement.innerHTML = '<p class="error"><small>Error generating preview.</small></p>'; } }
    function updateAdminPreview() { console.log("%cUpdating admin preview (v13)...", "color: blue; font-weight: bold;"); if (!businessInfoForm || !adminPreviewStatus || !adminPreviewHours || !adminPreviewContact || !businessStatusOverrideSelect || !contactEmailInput) { console.error("Admin preview update failed: Missing HTML elements!"); if(adminPreviewStatus) adminPreviewStatus.innerHTML = `<span class="status-unavailable">Preview Error: UI Missing</span>`; return; } const currentFormData = { contactEmail: contactEmailInput.value.trim() || null, statusOverride: businessStatusOverrideSelect.value || "auto", regularHours: {}, holidayHours: [], temporaryHours: [] }; daysOfWeek.forEach(day => { const el = document.getElementById(`${day}-isClosed`); if (!el) return; const isClosed = el.checked; const openVal = document.getElementById(`${day}-open`)?.value; const closeVal = document.getElementById(`${day}-close`)?.value; currentFormData.regularHours[day] = { open: isClosed ? null : (openVal || null), close: isClosed ? null : (closeVal || null), isClosed: isClosed }; }); document.querySelectorAll('#holiday-hours-list .holiday-entry').forEach(entryDiv => { const id = entryDiv.getAttribute('data-id'); if (!id) return; const isClosed = entryDiv.querySelector(`#holiday-isClosed-${id}`)?.checked || false; const date = entryDiv.querySelector(`#holiday-date-${id}`)?.value || null; if (date) { currentFormData.holidayHours.push({ date, label: entryDiv.querySelector(`#holiday-label-${id}`)?.value.trim() || null, open: isClosed ? null : (entryDiv.querySelector(`#holiday-open-${id}`)?.value || null), close: isClosed ? null : (entryDiv.querySelector(`#holiday-close-${id}`)?.value || null), isClosed }); } }); document.querySelectorAll('#temporary-hours-list .temporary-entry').forEach(entryDiv => { const id = entryDiv.getAttribute('data-id'); if (!id) return; const isClosed = entryDiv.querySelector(`#temp-isClosed-${id}`)?.checked || false; const startDate = entryDiv.querySelector(`#temp-start-${id}`)?.value || null; const endDate = entryDiv.querySelector(`#temp-end-${id}`)?.value || null; if (startDate && endDate) { if (endDate < startDate) { return; } currentFormData.temporaryHours.push({ startDate, endDate, label: entryDiv.querySelector(`#temp-label-${id}`)?.value.trim() || null, open: isClosed ? null : (entryDiv.querySelector(`#temp-open-${id}`)?.value || null), close: isClosed ? null : (entryDiv.querySelector(`#temp-close-${id}`)?.value || null), isClosed }); } }); currentFormData.holidayHours.sort((a, b) => (a.date > b.date ? 1 : -1)); currentFormData.temporaryHours.sort((a, b) => (a.startDate > b.startDate ? 1 : -1)); let currentStatus = 'Closed'; let statusReason = 'Default'; const previewNow = new Date(); const previewDayName = daysOfWeek[(previewNow.getDay() + 6) % 7]; const previewDateStr = previewNow.toLocaleDateString('en-CA'); const previewCurrentMinutes = previewNow.getHours() * 60 + previewNow.getMinutes(); console.log(`Admin Preview Time Check: Date=${previewDateStr}, Day=${previewDayName}, Mins=${previewCurrentMinutes}`); let activeHoursRule = null; let ruleApplied = false; if (currentFormData.statusOverride !== 'auto') { currentStatus = currentFormData.statusOverride === 'open' ? 'Open' : (currentFormData.statusOverride === 'closed' ? 'Closed' : 'Temporarily Unavailable'); statusReason = 'Manual Override'; activeHoursRule = { reason: statusReason }; ruleApplied = true; console.log("Admin Preview Status determined by: Override"); } if (!ruleApplied) { const todayHoliday = currentFormData.holidayHours.find(h => h.date === previewDateStr); if (todayHoliday) { statusReason = `Holiday (${todayHoliday.label || todayHoliday.date})`; activeHoursRule = { ...todayHoliday, reason: statusReason }; ruleApplied = true; if (todayHoliday.isClosed || !todayHoliday.open || !todayHoliday.close) { currentStatus = 'Closed'; } else { const openMins = timeStringToMinutesBI(todayHoliday.open); const closeMins = timeStringToMinutesBI(todayHoliday.close); currentStatus = (openMins !== null && closeMins !== null && previewCurrentMinutes >= openMins && previewCurrentMinutes < closeMins) ? 'Open' : 'Closed'; } activeHoursRule.reason = statusReason + ` (${currentStatus})`; console.log(`Admin Preview Status determined by: Holiday (${currentStatus})`); } } if (!ruleApplied) { const activeTemporary = currentFormData.temporaryHours.find(t => previewDateStr >= t.startDate && previewDateStr <= t.endDate); if (activeTemporary) { console.log("Admin Preview: Found active temporary period:", activeTemporary); if (activeTemporary.isClosed) { currentStatus = 'Closed'; statusReason = `Temporary Hours (${activeTemporary.label || 'Active'}) - Closed All Day`; activeHoursRule = { ...activeTemporary, reason: statusReason }; ruleApplied = true; console.log("Admin Preview Status determined by: Temporary Rule (Closed All Day)"); } else if (activeTemporary.open && activeTemporary.close) { const openMins = timeStringToMinutesBI(activeTemporary.open); const closeMins = timeStringToMinutesBI(activeTemporary.close); if (openMins !== null && closeMins !== null && previewCurrentMinutes >= openMins && previewCurrentMinutes < closeMins) { currentStatus = 'Temporarily Unavailable'; statusReason = `Temporary Hours (${activeTemporary.label || 'Active'})`; activeHoursRule = { ...activeTemporary, reason: statusReason }; ruleApplied = true; console.log("Admin Preview Status determined by: Temporary Rule (Specific Time - Set to Unavailable)"); } else { console.log("Admin Preview: Time is outside temporary specific hours. Falling through."); } } else { console.log("Admin Preview: Temporary rule found but has no closing/timing info. Falling through."); } } } if (!ruleApplied) { statusReason = 'Regular Hours'; const todayRegularHours = currentFormData.regularHours[previewDayName]; if (todayRegularHours && !todayRegularHours.isClosed && todayRegularHours.open && todayRegularHours.close) { const openMins = timeStringToMinutesBI(todayRegularHours.open); const closeMins = timeStringToMinutesBI(todayRegularHours.close); if (openMins !== null && closeMins !== null && previewCurrentMinutes >= openMins && previewCurrentMinutes < closeMins) { currentStatus = 'Open'; activeHoursRule = { ...todayRegularHours, day: previewDayName, reason: statusReason + " (Open)" }; } else { currentStatus = 'Closed'; activeHoursRule = { ...todayRegularHours, day: previewDayName, reason: statusReason + " (Outside Hours)" }; } } else { currentStatus = 'Closed'; activeHoursRule = { ...(todayRegularHours || {}), day: previewDayName, isClosed: true, reason: statusReason + " (Closed Today)" }; } console.log(`Admin Preview Status determined by: Regular Hours (${currentStatus})`); } let statusClass = 'status-closed'; if (currentStatus === 'Open') statusClass = 'status-open'; else if (currentStatus === 'Temporarily Unavailable') statusClass = 'status-unavailable'; const displayReason = activeHoursRule?.reason || statusReason || 'Unknown'; adminPreviewStatus.innerHTML = `<span class="${statusClass}">${currentStatus}</span> <span class="status-reason">(${displayReason})</span>`; adminPreviewHours.innerHTML = ''; let hoursHtml = '<h4>Regular Hours</h4><ul>'; daysOfWeek.forEach(day => { const dayData = currentFormData.regularHours[day]; const isCurrentDay = day === previewDayName; const highlightClass = isCurrentDay ? 'current-day-preview' : ''; hoursHtml += `<li class="${highlightClass}"><strong>${capitalizeFirstLetter(day)}:</strong> ${dayData && !dayData.isClosed && dayData.open && dayData.close ? `<span>${formatTimeForAdminPreview(dayData.open)} - ${formatTimeForAdminPreview(dayData.close)} ET</span>` : '<span>Closed</span>'}</li>`; }); hoursHtml += '</ul>'; if (currentFormData.temporaryHours && currentFormData.temporaryHours.length > 0) { hoursHtml += '<h4>Upcoming/Active Temporary Hours</h4><ul class="special-hours-preview">'; currentFormData.temporaryHours.forEach(temp => { if (temp.startDate && temp.endDate) { hoursHtml += `<li><strong>${temp.label || 'Temporary Schedule'}:</strong><div class="special-hours-details"><span class="dates">${temp.startDate} to ${temp.endDate}</span> ${temp.isClosed ? '<span class="hours">Closed</span>' : `<span class="hours">${formatTimeForAdminPreview(temp.open) || '?'} - ${formatTimeForAdminPreview(temp.close) || '?'} ET</span>`}</div></li>`; } }); hoursHtml += '</ul>'; } if (currentFormData.holidayHours && currentFormData.holidayHours.length > 0) { hoursHtml += '<h4>Upcoming Holiday Hours</h4><ul class="special-hours-preview">'; currentFormData.holidayHours.forEach(holiday => { if (holiday.date) { hoursHtml += `<li><strong>${holiday.label || holiday.date}:</strong><div class="special-hours-details">${holiday.isClosed ? '<span class="hours">Closed</span>' : `<span class="hours">${formatTimeForAdminPreview(holiday.open) || '?'} - ${formatTimeForAdminPreview(holiday.close) || '?'} ET</span>`}</div></li>`; } }); hoursHtml += '</ul>'; } hoursHtml += '<p class="preview-timezone-note">Preview based on your browser time. Assumes ET input for hours.</p>'; adminPreviewHours.innerHTML = hoursHtml; if (currentFormData.contactEmail) { adminPreviewContact.innerHTML = `Contact: <a href="mailto:${currentFormData.contactEmail}" target="_blank">${currentFormData.contactEmail}</a>`; } else { adminPreviewContact.innerHTML = ''; } console.log("Admin preview update complete."); }


    // ============================================================
    // SECTION 6: DATA LOADING FUNCTIONS (from Firestore)
    // ============================================================
    async function loadProfileData() { if (!auth || !auth.currentUser) { return; } if (!profileForm || !maintenanceModeToggle || !hideTikTokSectionToggle || !countdownTitleInput || !countdownDatetimeInput || !countdownExpiredMessageInput || !adminPfpPreview || !profileStatusInput) { console.error("Profile/settings form elements missing!"); return; } console.log("Loading profile & countdown data..."); try { const docSnap = await getDoc(profileDocRef); if (docSnap.exists()) { const data = docSnap.data(); if(profileUsernameInput) profileUsernameInput.value = data.username || ''; if(profilePicUrlInput) profilePicUrlInput.value = data.profilePicUrl || ''; if(profileBioInput) profileBioInput.value = data.bio || ''; if(profileStatusInput) profileStatusInput.value = data.status || 'offline'; maintenanceModeToggle.checked = data.isMaintenanceModeEnabled || false; maintenanceModeToggle.disabled = false; hideTikTokSectionToggle.checked = data.hideTikTokSection || false; hideTikTokSectionToggle.disabled = false; if (countdownTitleInput) { countdownTitleInput.value = data.countdownTitle || ''; countdownTitleInput.disabled = false; } if (countdownDatetimeInput) { if (data.countdownTargetDate && data.countdownTargetDate instanceof Timestamp) { try { countdownDatetimeInput.value = timestampToDatetimeLocal(data.countdownTargetDate); } catch (dateError) { countdownDatetimeInput.value = ''; if (settingsStatusMessage) showSettingsStatus("Error reading existing date.", true); } } else { countdownDatetimeInput.value = ''; } countdownDatetimeInput.disabled = false; } if (countdownExpiredMessageInput) { countdownExpiredMessageInput.value = data.countdownExpiredMessage || ''; countdownExpiredMessageInput.disabled = false; } if (adminPfpPreview) { if (data.profilePicUrl) { adminPfpPreview.src = data.profilePicUrl; adminPfpPreview.style.display = 'inline-block'; adminPfpPreview.onerror = () => { adminPfpPreview.style.display = 'none'; if(profilePicUrlInput) profilePicUrlInput.classList.add('input-error'); }; } else { adminPfpPreview.style.display = 'none'; } } } else { if (profileForm) profileForm.reset(); if (profileStatusInput) profileStatusInput.value = 'offline'; maintenanceModeToggle.checked = false; maintenanceModeToggle.disabled = false; hideTikTokSectionToggle.checked = false; hideTikTokSectionToggle.disabled = false; if (countdownTitleInput) { countdownTitleInput.value = ''; countdownTitleInput.disabled = true; } if (countdownDatetimeInput) { countdownDatetimeInput.value = ''; countdownDatetimeInput.disabled = true; } if (countdownExpiredMessageInput) { countdownExpiredMessageInput.value = ''; countdownExpiredMessageInput.disabled = true; } if(adminPfpPreview) adminPfpPreview.style.display = 'none'; if(settingsStatusMessage) showSettingsStatus("Settings document missing.", true); } } catch (error) { console.error("Error loading profile/settings data:", error); if(profileStatusMessage) showProfileStatus("Error loading profile.", true); if(settingsStatusMessage) showSettingsStatus("Error loading settings.", true); if (profileForm) profileForm.reset(); if (profileStatusInput) profileStatusInput.value = 'offline'; maintenanceModeToggle.checked = false; maintenanceModeToggle.disabled = true; hideTikTokSectionToggle.checked = false; hideTikTokSectionToggle.disabled = true; if (countdownTitleInput) { countdownTitleInput.value = ''; countdownTitleInput.disabled = true; } if (countdownDatetimeInput) { countdownDatetimeInput.value = ''; countdownDatetimeInput.disabled = true; } if (countdownExpiredMessageInput) { countdownExpiredMessageInput.value = ''; countdownExpiredMessageInput.disabled = true; } if(adminPfpPreview) adminPfpPreview.style.display = 'none'; } }
    async function loadBusinessInfoData() { if (!businessInfoForm) { console.log("Business info form not found."); return; } console.log("Loading business info data..."); try { const docSnap = await getDoc(businessDocRef); let data = {}; if (docSnap.exists()) { data = docSnap.data(); } else { console.log("Business info document does not exist."); } if (contactEmailInput) contactEmailInput.value = data.contactEmail || ''; if (businessStatusOverrideSelect) businessStatusOverrideSelect.value = data.statusOverride || 'auto'; if (typeof populateRegularHoursForm === 'function') { populateRegularHoursForm(data.regularHours); } if (holidayHoursList && typeof renderHolidayEntry === 'function') { holidayHoursList.innerHTML = ''; (data.holidayHours || []).forEach((entry, index) => { try { holidayHoursList.appendChild(renderHolidayEntry(entry, index)); } catch(renderError) { console.error(`Error rendering holiday entry ${index}:`, renderError, entry); holidayHoursList.innerHTML += `<li class='error'>Error rendering loaded holiday entry ${index + 1}.</li>`; } }); } if (temporaryHoursList && typeof renderTemporaryEntry === 'function') { temporaryHoursList.innerHTML = ''; (data.temporaryHours || []).forEach((entry, index) => { try { temporaryHoursList.appendChild(renderTemporaryEntry(entry, index)); } catch(renderError) { console.error(`Error rendering temporary entry ${index}:`, renderError, entry); temporaryHoursList.innerHTML += `<li class='error'>Error rendering loaded temporary entry ${index + 1}.</li>`; } }); } if (typeof updateAdminPreview === 'function') { updateAdminPreview(); } } catch (error) { console.error("Error loading business info:", error); showBusinessInfoStatus(`Error loading info: ${error.message || error}`, true); if (typeof populateRegularHoursForm === 'function') populateRegularHoursForm(); if (holidayHoursList) holidayHoursList.innerHTML = '<p class="error">Could not load holiday hours.</p>'; if (temporaryHoursList) temporaryHoursList.innerHTML = '<p class="error">Could not load temporary hours.</p>'; if (typeof updateAdminPreview === 'function') updateAdminPreview(); } }
    async function loadPresidentData() { if (!auth || !auth.currentUser) { return; } if (!presidentForm) { return; } console.log("Loading president data..."); try { const docSnap = await getDoc(presidentDocRef); if (docSnap.exists()) { const data = docSnap.data(); if(presidentNameInput) presidentNameInput.value = data.name || ''; if(presidentBornInput) presidentBornInput.value = data.born || ''; if(presidentHeightInput) presidentHeightInput.value = data.height || ''; if(presidentPartyInput) presidentPartyInput.value = data.party || ''; if(presidentTermInput) presidentTermInput.value = data.term || ''; if(presidentVpInput) presidentVpInput.value = data.vp || ''; if(presidentImageUrlInput) presidentImageUrlInput.value = data.imageUrl || ''; } else { if (presidentForm) presidentForm.reset(); } if (typeof updatePresidentPreview === 'function') { updatePresidentPreview(); } } catch (error) { console.error("Error loading president data:", error); showPresidentStatus("Error loading president data.", true); if (presidentForm) presidentForm.reset(); if (typeof updatePresidentPreview === 'function') { updatePresidentPreview(); } } }
    async function loadShoutoutsAdmin(platform) { const listContainer = document.getElementById(`shoutouts-${platform}-list-admin`); const countElement = document.getElementById(`${platform}-count`); console.log(`DEBUG: loadShoutoutsAdmin called for ${platform}`); if (!listContainer) { console.error(`List container missing for ${platform}`); return; } if (countElement) countElement.textContent = ''; listContainer.innerHTML = `<p>Loading ${platform} shoutouts...</p>`; if (typeof allShoutouts !== 'undefined' && allShoutouts && allShoutouts.hasOwnProperty(platform)) { allShoutouts[platform] = []; } else { console.error(`allShoutouts missing key ${platform}`); if (typeof allShoutouts === 'undefined' || !allShoutouts) { allShoutouts = { tiktok: [], instagram: [], youtube: [] }; } else if (!allShoutouts.hasOwnProperty(platform)) { allShoutouts[platform] = []; } } try { const shoutoutsCol = collection(db, 'shoutouts'); const shoutoutQuery = query(shoutoutsCol, where("platform", "==", platform), orderBy("order", "asc")); const querySnapshot = await getDocs(shoutoutQuery); console.log(`Loaded ${querySnapshot.size} ${platform} docs.`); querySnapshot.forEach((docSnapshot) => { allShoutouts[platform].push({ id: docSnapshot.id, ...docSnapshot.data() }); }); if (typeof displayFilteredShoutouts === 'function') { displayFilteredShoutouts(platform); } else { console.error(`displayFilteredShoutouts missing`); listContainer.innerHTML = `<p class="error">Error init display.</p>`; if (countElement) countElement.textContent = '(Error)'; } } catch (error) { console.error(`Error loading ${platform} shoutouts:`, error); if (error.code === 'failed-precondition') { listContainer.innerHTML = `<p class="error">Error: Missing Firestore index. Check console.</p>`; showAdminStatus(`Error loading ${platform}: Missing index.`, true); } else { listContainer.innerHTML = `<p class="error">Error loading ${platform}.</p>`; showAdminStatus(`Failed to load ${platform}: ${error.message}`, true); } if (countElement) countElement.textContent = '(Error)'; } }
    async function loadUsefulLinksAdmin() { if (!usefulLinksListAdmin) { console.error("Useful links list container missing."); return; } if (usefulLinksCount) usefulLinksCount.textContent = ''; usefulLinksListAdmin.innerHTML = `<p>Loading useful links...</p>`; allUsefulLinks = []; try { const linkQuery = query(usefulLinksCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(linkQuery); querySnapshot.forEach((doc) => { allUsefulLinks.push({ id: doc.id, ...doc.data() }); }); console.log(`Stored ${allUsefulLinks.length} useful links.`); displayFilteredUsefulLinks(); } catch (error) { console.error("Error loading useful links:", error); usefulLinksListAdmin.innerHTML = `<p class="error">Error loading links.</p>`; if (usefulLinksCount) usefulLinksCount.textContent = '(Error)'; showAdminStatus("Error loading useful links.", true); } }
    async function loadSocialLinksAdmin() { if (!socialLinksListAdmin) { console.error("Social links list container missing."); return; } if (socialLinksCount) socialLinksCount.textContent = ''; socialLinksListAdmin.innerHTML = `<p>Loading social links...</p>`; allSocialLinks = []; try { const linkQuery = query(socialLinksCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(linkQuery); querySnapshot.forEach((doc) => { allSocialLinks.push({ id: doc.id, ...doc.data() }); }); console.log(`Stored ${allSocialLinks.length} social links.`); displayFilteredSocialLinks(); } catch (error) { console.error("Error loading social links:", error); let errorMsg = "Error loading social links."; if (error.code === 'failed-precondition') { errorMsg = "Error: Missing Firestore index for social links (order)."; showAdminStatus(errorMsg, true); } else { showAdminStatus(errorMsg + `: ${error.message}`, true); } socialLinksListAdmin.innerHTML = `<p class="error">${errorMsg}</p>`; if (socialLinksCount) socialLinksCount.textContent = '(Error)'; } }
    async function loadDisabilitiesAdmin() { if (!disabilitiesListAdmin) { console.error("Disabilities list container missing."); return; } if (disabilitiesCount) disabilitiesCount.textContent = ''; disabilitiesListAdmin.innerHTML = `<p>Loading disability links...</p>`; allDisabilities = []; try { const disabilityQuery = query(disabilitiesCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(disabilityQuery); querySnapshot.forEach((doc) => { allDisabilities.push({ id: doc.id, ...doc.data() }); }); console.log(`Stored ${allDisabilities.length} disability links.`); displayFilteredDisabilities(); } catch (error) { console.error("Error loading disabilities:", error); let errorMsg = "Error loading disabilities."; if (error.code === 'failed-precondition') { errorMsg = "Error: Missing Firestore index for disabilities (order)."; showAdminStatus(errorMsg, true); } else { showAdminStatus(errorMsg + `: ${error.message}`, true); } disabilitiesListAdmin.innerHTML = `<p class="error">${errorMsg}</p>`; if (disabilitiesCount) disabilitiesCount.textContent = '(Error)'; } }
    async function loadTechItemsAdmin() { if (!techItemsListAdmin) { console.error("Tech items list container element missing."); return; } console.log("Loading tech items for admin..."); if (techItemsCount) techItemsCount.textContent = '(...)'; techItemsListAdmin.innerHTML = `<p>Loading tech items...</p>`; allTechItems = []; try { const techQuery = query(techItemsCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(techQuery); querySnapshot.forEach((doc) => { allTechItems.push({ id: doc.id, ...doc.data() }); }); console.log(`Loaded ${allTechItems.length} tech items.`); displayFilteredTechItems(); } catch (error) { console.error("Error loading tech items:", error); let errorMsg = "Error loading tech items."; if (error.code === 'failed-precondition') { errorMsg = "Error: Missing Firestore index for tech items (order)."; showAdminStatus(errorMsg, true); } else { showAdminStatus(errorMsg + `: ${error.message}`, true); } techItemsListAdmin.innerHTML = `<p class="error">${errorMsg}</p>`; if (techItemsCount) techItemsCount.textContent = '(Error)'; } }
    async function loadFaqsAdmin() { if (!faqListAdmin) { console.error("FAQ list container missing."); return; } console.log("Loading FAQs for admin..."); if (faqCount) faqCount.textContent = '(...)'; faqListAdmin.innerHTML = `<p>Loading FAQs...</p>`; allFaqs = []; try { const faqQuery = query(faqsCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(faqQuery); querySnapshot.forEach((doc) => { allFaqs.push({ id: doc.id, ...doc.data() }); }); console.log(`Loaded ${allFaqs.length} FAQs.`); displayFilteredFaqs(); } catch (error) { console.error("Error loading FAQs:", error); let errorMsg = "Error loading FAQs."; if (error.code === 'failed-precondition') errorMsg = "Error: Missing Firestore index for FAQs (order)."; showAdminStatus(errorMsg, true); faqListAdmin.innerHTML = `<p class="error">${errorMsg}</p>`; if (faqCount) faqCount.textContent = '(Error)'; } }
    async function loadActivityLog() { const logListContainer = document.getElementById('activity-log-list'); const logCountElement = document.getElementById('activity-log-count'); const searchInput = document.getElementById('search-activity-log'); if (!logListContainer || !logCountElement || !searchInput) { console.error("Required elements for loadActivityLog missing."); return; } searchInput.value = ''; logListContainer.innerHTML = '<p>Loading activity log...</p>'; logCountElement.textContent = '(...)'; allActivityLogEntries = []; try { const logCollectionRef = collection(db, "activity_log"); const logQuery = query(logCollectionRef, orderBy("timestamp", "desc"), limit(50)); const querySnapshot = await getDocs(logQuery); querySnapshot.forEach(doc => { allActivityLogEntries.push({ id: doc.id, ...doc.data() }); }); console.log(`Loaded ${allActivityLogEntries.length} log entries.`); displayFilteredActivityLog(); } catch (error) { console.error("Error loading activity log:", error); logListContainer.innerHTML = '<p class="error">Error loading activity log.</p>'; logCountElement.textContent = '(Error)'; if (typeof showAdminStatus === 'function') { showAdminStatus("Failed to load activity log.", true); } } }
    async function loadStatusOverride() { if (!statusOverrideSelect) return; try { const docSnap = await getDoc(profileDocRef); if (docSnap.exists()) { const currentOverride = docSnap.data()?.statusPageOverride || 'Automatic'; statusOverrideSelect.value = currentOverride; } else { console.warn("Main profile document not found, cannot load status override."); statusOverrideSelect.value = 'Automatic'; } } catch (error) { console.error("Error loading status override:", error); showOverrideStatus("Error loading override setting.", true); } }
    async function loadGroupsAdmin() { if (!groupsListAdminContainer) { console.error("Groups admin list container missing."); return; } if (groupsCountAdmin) groupsCountAdmin.textContent = '(...)'; groupsListAdminContainer.innerHTML = `<p>Loading groups...</p>`; allStatusGroups = []; let groupOptionsHtml = '<option value="">-- No Group --</option>'; try { const groupQuery = query(statusGroupsCollectionRef, orderBy("order", "asc")); const querySnapshot = await getDocs(groupQuery); groupsListAdminContainer.innerHTML = ''; if (querySnapshot.empty) { groupsListAdminContainer.innerHTML = '<p>No groups created yet.</p>'; } else { querySnapshot.forEach((doc) => { const groupData = { id: doc.id, ...doc.data() }; allStatusGroups.push(groupData); renderGroupAdminListItem(groupsListAdminContainer, doc.id, groupData); groupOptionsHtml += `<option value="${doc.id}">${groupData.name || doc.id}</option>`; }); } if (groupsCountAdmin) groupsCountAdmin.textContent = `(${querySnapshot.size})`; if (componentGroupSelect) componentGroupSelect.innerHTML = groupOptionsHtml; if (editComponentGroupSelect) editComponentGroupSelect.innerHTML = groupOptionsHtml; } catch (error) { console.error("Error loading groups for admin:", error); groupsListAdminContainer.innerHTML = `<p class="error">Error loading groups.</p>`; if (groupsCountAdmin) groupsCountAdmin.textContent = '(Error)'; if (componentGroupSelect) componentGroupSelect.innerHTML = '<option value="">Error Loading</option>'; if (editComponentGroupSelect) editComponentGroupSelect.innerHTML = '<option value="">Error Loading</option>'; showAdminStatus("Error loading component groups.", true); } }
    async function loadComponentsAdmin() { if (!componentsListAdminContainer) { console.error("Component admin list container missing."); return; } if (componentsCountAdmin) componentsCountAdmin.textContent = '(...)'; componentsListAdminContainer.innerHTML = `<p>Loading components...</p>`; allStatusComponents = []; let totalComponents = 0; try { const componentQuery = query(componentsCollectionRef, orderBy("order", "asc")); const componentSnapshot = await getDocs(componentQuery); componentSnapshot.forEach(doc => allStatusComponents.push({ id: doc.id, ...doc.data() })); totalComponents = allStatusComponents.length; componentsListAdminContainer.innerHTML = ''; if (totalComponents === 0) { componentsListAdminContainer.innerHTML = '<p>No components created yet.</p>'; } else { allStatusComponents.sort((a, b) => { const groupAOrder = allStatusGroups.find(g => g.id === a.groupId)?.order ?? Infinity; const groupBOrder = allStatusGroups.find(g => g.id === b.groupId)?.order ?? Infinity; if (groupAOrder !== groupBOrder) { return groupAOrder - groupBOrder; } return (a.order ?? Infinity) - (b.order ?? Infinity); }); allStatusComponents.forEach(compData => { renderComponentAdminListItem(componentsListAdminContainer, compData.id, compData); }); } if (componentsCountAdmin) componentsCountAdmin.textContent = `(${totalComponents})`; populateAffectedComponentsCheckboxes(incidentAffectedComponentsContainer); populateAffectedComponentsCheckboxes(maintenanceAffectedComponentsContainer); } catch (error) { console.error("Error loading components for admin:", error); componentsListAdminContainer.innerHTML = `<p class="error">Error loading components.</p>`; if (componentsCountAdmin) componentsCountAdmin.textContent = '(Error)'; showAdminStatus("Error loading components.", true); } }
    async function loadIncidentsAdmin() { if (!activeIncidentsListAdminContainer) return; if(activeIncidentsCountAdmin) activeIncidentsCountAdmin.textContent = '(...)'; activeIncidentsListAdminContainer.innerHTML = '<p>Loading active incidents...</p>'; try { const incidentQuery = query(incidentsCollectionRef, where("status", "!=", "Resolved"), orderBy("createdAt", "desc")); const querySnapshot = await getDocs(incidentQuery); activeIncidentsListAdminContainer.innerHTML = ''; if (querySnapshot.empty) { activeIncidentsListAdminContainer.innerHTML = '<p>No active incidents.</p>'; } else { querySnapshot.forEach((doc) => { renderIncidentAdminListItem(activeIncidentsListAdminContainer, doc.id, doc.data()); }); } if(activeIncidentsCountAdmin) activeIncidentsCountAdmin.textContent = `(${querySnapshot.size})`; } catch (error) { console.error("Error loading active incidents:", error); if (error.code === 'failed-precondition') { activeIncidentsListAdminContainer.innerHTML = `<p class="error">Error: Missing Firestore index for incidents. Please create it using the link in the browser console (F12).</p>`; showAdminStatus("Incident Query Error: Missing index. Check console.", true); } else { activeIncidentsListAdminContainer.innerHTML = `<p class="error">Error loading incidents.</p>`; showAdminStatus("Error loading incidents.", true); } if(activeIncidentsCountAdmin) activeIncidentsCountAdmin.textContent = '(Error)'; } }
    async function loadMaintenanceAdmin() { if (!maintenanceListAdminContainer) return; if(maintenanceCountAdmin) maintenanceCountAdmin.textContent = '(...)'; maintenanceListAdminContainer.innerHTML = '<p>Loading maintenance schedule...</p>'; try { const maintQuery = query(maintenanceCollectionRef, where("status", "in", ["Scheduled", "In Progress"]), orderBy("startTime", "asc")); const querySnapshot = await getDocs(maintQuery); maintenanceListAdminContainer.innerHTML = ''; if (querySnapshot.empty) { maintenanceListAdminContainer.innerHTML = '<p>No upcoming or ongoing maintenance.</p>'; } else { querySnapshot.forEach((doc) => { renderMaintenanceAdminListItem(maintenanceListAdminContainer, doc.id, doc.data()); }); } if(maintenanceCountAdmin) maintenanceCountAdmin.textContent = `(${querySnapshot.size})`; } catch (error) { console.error("Error loading maintenance for admin:", error); if (error.code === 'failed-precondition') { maintenanceListAdminContainer.innerHTML = `<p class="error">Error: Missing Firestore index for maintenance. Check console.</p>`; showAdminStatus("Maintenance Query Error: Missing index. Check console.", true); } else { maintenanceListAdminContainer.innerHTML = `<p class="error">Error loading maintenance.</p>`; showAdminStatus("Error loading maintenance.", true); } if(maintenanceCountAdmin) maintenanceCountAdmin.textContent = '(Error)'; } }


    // ============================================================
    // SECTION 7: DATA SAVING/UPDATING/DELETING FUNCTIONS
    // ============================================================
    async function saveProfileData(event) { event.preventDefault(); if (!auth || !auth.currentUser) { showProfileStatus("Error: Not logged in.", true); return; } if (!profileForm) return; console.log("Attempting to save profile data..."); const newData = { username: profileUsernameInput?.value.trim() || "", profilePicUrl: profilePicUrlInput?.value.trim() || "", bio: profileBioInput?.value.trim() || "", status: profileStatusInput?.value || "offline", countdownTitle: countdownTitleInput?.value.trim() || "", countdownTargetDateTime: countdownDatetimeInput?.value.trim() || "" }; const dateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/; if (newData.countdownTargetDateTime && !dateTimeRegex.test(newData.countdownTargetDateTime)) { showProfileStatus("Invalid Countdown Date/Time format. Please use YYYY-MM-DDTHH:MM:SS", true); return; } showProfileStatus("Saving profile..."); try { await setDoc(profileDocRef, { ...newData, lastUpdated: serverTimestamp() }, { merge: true }); console.log("Profile data save successful:", profileDocRef.path); showProfileStatus("Profile updated successfully!", false); if (adminPfpPreview && newData.profilePicUrl) { adminPfpPreview.src = newData.profilePicUrl; adminPfpPreview.style.display = 'inline-block'; } else if (adminPfpPreview) { adminPfpPreview.src = ''; adminPfpPreview.style.display = 'none'; } } catch (error) { console.error("Error saving profile data:", error); showProfileStatus(`Error saving profile: ${error.message}`, true); } }
    async function saveMaintenanceModeStatus(isEnabled) { if (!auth || !auth.currentUser) { showAdminStatus("Error: Not logged in.", true); if(maintenanceModeToggle) maintenanceModeToggle.checked = !isEnabled; return; } const statusElement = settingsStatusMessage || adminStatusElement; if (statusElement) { statusElement.textContent = "Saving setting..."; statusElement.className = "status-message"; statusElement.style.display = 'block'; } try { await setDoc(profileDocRef, { isMaintenanceModeEnabled: isEnabled }, { merge: true }); console.log("Maintenance mode status saved:", isEnabled); const message = `Maintenance mode ${isEnabled ? 'enabled' : 'disabled'}.`; if (statusElement === settingsStatusMessage && settingsStatusMessage) { showSettingsStatus(message, false); } else { showAdminStatus(message, false); } } catch (error) { console.error("Error saving maintenance mode status:", error); if (statusElement === settingsStatusMessage && settingsStatusMessage) { showSettingsStatus(`Error saving setting: ${error.message}`, true); } else { showAdminStatus(`Error saving maintenance mode: ${error.message}`, true); } if(maintenanceModeToggle) maintenanceModeToggle.checked = !isEnabled; } }
    async function saveHideTikTokSectionStatus(isEnabled) { if (!auth || !auth.currentUser) { showAdminStatus("Error: Not logged in.", true); if(hideTikTokSectionToggle) hideTikTokSectionToggle.checked = !isEnabled; return; } const statusElement = settingsStatusMessage || adminStatusElement; if (statusElement) { statusElement.textContent = "Saving setting..."; statusElement.className = "status-message"; statusElement.style.display = 'block'; } try { await setDoc(profileDocRef, { hideTikTokSection: isEnabled }, { merge: true }); console.log("Hide TikTok Section status saved:", isEnabled); const message = `TikTok homepage section set to ${isEnabled ? 'hidden' : 'visible'}.`; if (statusElement === settingsStatusMessage && settingsStatusMessage) { showSettingsStatus(message, false); } else { showAdminStatus(message, false); } } catch (error) { console.error("Error saving Hide TikTok Section status:", error); if (statusElement === settingsStatusMessage && settingsStatusMessage) { showSettingsStatus(`Error saving setting: ${error.message}`, true); } else { showAdminStatus(`Error saving Hide TikTok setting: ${error.message}`, true); } if(hideTikTokSectionToggle) hideTikTokSectionToggle.checked = !isEnabled; } }
    async function saveCountdownSettings(event) { console.log(">>> SAVE COUNTDOWN BUTTON CLICKED"); if (!countdownTitleInput || !countdownDatetimeInput || !countdownExpiredMessageInput || !settingsStatusMessage) { console.error(">>> ERROR: Missing countdown elements!"); showSettingsStatus("Error: Page structure problem.", true); return; } if (!profileDocRef) { console.error(">>> ERROR: profileDocRef missing."); showSettingsStatus("Error: Config reference missing.", true); return; } const title = countdownTitleInput.value.trim(); const dateTimeString = countdownDatetimeInput.value.trim(); const expiredMessage = countdownExpiredMessageInput.value.trim(); console.log(`>>> Read Values: Title='${title}', DateTime='${dateTimeString}', ExpiredMsg='${expiredMessage}'`); showSettingsStatus("Saving countdown...", false); const updateData = { countdownTitle: title, countdownExpiredMessage: expiredMessage }; let isValid = true; let targetTimestamp = null; if (dateTimeString) { console.log(">>> Processing DateTime String..."); if (!/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/.test(dateTimeString)) { console.error(">>> ERROR: Invalid DateTime format."); showSettingsStatus('Invalid Date/Time format.', true); isValid = false; } else { try { const localDate = new Date(dateTimeString); if (isNaN(localDate.getTime())) { throw new Error("Invalid date/time value."); } targetTimestamp = Timestamp.fromDate(localDate); updateData.countdownTargetDate = targetTimestamp; console.log(">>> SUCCESS: Converted to Timestamp:", targetTimestamp); } catch (error) { console.error(">>> ERROR: Parsing date/time:", error); let errorText = `Error parsing date/time: ${error.message}`; if (error instanceof ReferenceError && error.message.includes("Timestamp is not defined")) { errorText += " (Import Timestamp!)"; } showSettingsStatus(errorText, true); isValid = false; } } } else { updateData.countdownTargetDate = null; console.log(">>> DateTime field empty."); } if (!isValid) { console.log(">>> Validation failed."); return; } try { console.log(">>> PRE-UPDATE CHECK <<<"); console.log(">>> profileDocRef Path:", profileDocRef.path); console.log(">>> Data being sent:", JSON.stringify(updateData, null, 2)); await updateDoc(profileDocRef, updateData); console.log(">>> updateDoc SUCCEEDED <<<"); showSettingsStatus("Countdown settings saved!", false); console.log("Countdown settings updated."); if (typeof logAdminActivity === 'function') { logAdminActivity('UPDATE_COUNTDOWN_SETTINGS', { title: title, targetSet: !!updateData.countdownTargetDate, messageSet: !!expiredMessage }); } } catch (error) { console.error(">>> updateDoc FAILED <<<", error); showSettingsStatus(`Error saving: ${error.message}`, true); if (typeof logAdminActivity === 'function') { logAdminActivity('UPDATE_COUNTDOWN_SETTINGS_FAILED', { error: error.message }); } } }
    async function saveBusinessInfoData(event) { event.preventDefault(); if (!auth || !auth.currentUser) { showBusinessInfoStatus("Not logged in.", true); return; } if (!businessInfoForm) { return; } showBusinessInfoStatus("Saving..."); const newData = { contactEmail: contactEmailInput?.value.trim() || null, statusOverride: businessStatusOverrideSelect?.value || "auto", regularHours: {}, holidayHours: [], temporaryHours: [], lastUpdated: serverTimestamp() }; let formIsValid = true; daysOfWeek.forEach(day => { const isClosed = document.getElementById(`${day}-isClosed`)?.checked || false; const openTime = document.getElementById(`${day}-open`)?.value || null; const closeTime = document.getElementById(`${day}-close`)?.value || null; newData.regularHours[day] = { open: isClosed ? null : openTime, close: isClosed ? null : closeTime, isClosed: isClosed }; if (!isClosed && (!openTime || !closeTime)) { console.warn(`Missing open/close time for ${day}`); } }); document.querySelectorAll('#holiday-hours-list .holiday-entry').forEach(entryDiv => { const id = entryDiv.getAttribute('data-id'); if (!id) return; const isClosed = entryDiv.querySelector(`#holiday-isClosed-${id}`)?.checked || false; const date = entryDiv.querySelector(`#holiday-date-${id}`)?.value || null; const openTime = entryDiv.querySelector(`#holiday-open-${id}`)?.value || null; const closeTime = entryDiv.querySelector(`#holiday-close-${id}`)?.value || null; if (date) { const entryData = { date, label: entryDiv.querySelector(`#holiday-label-${id}`)?.value.trim() || null, open: isClosed ? null : openTime, close: isClosed ? null : closeTime, isClosed }; if (!isClosed && (!openTime || !closeTime)) { console.warn(`Missing holiday time ${date}`); } newData.holidayHours.push(entryData); } else { formIsValid = false; } }); document.querySelectorAll('#temporary-hours-list .temporary-entry').forEach(entryDiv => { const id = entryDiv.getAttribute('data-id'); if (!id) return; const isClosed = entryDiv.querySelector(`#temp-isClosed-${id}`)?.checked || false; const startDate = entryDiv.querySelector(`#temp-start-${id}`)?.value || null; const endDate = entryDiv.querySelector(`#temp-end-${id}`)?.value || null; const openTime = entryDiv.querySelector(`#temp-open-${id}`)?.value || null; const closeTime = entryDiv.querySelector(`#temp-close-${id}`)?.value || null; if (startDate && endDate) { if (endDate < startDate) { showBusinessInfoStatus(`Error: Temp End Date < Start Date.`, true); formIsValid = false; return; } const entryData = { startDate, endDate, label: entryDiv.querySelector(`#temp-label-${id}`)?.value.trim() || null, open: isClosed ? null : openTime, close: isClosed ? null : closeTime, isClosed }; if (!isClosed && (!openTime || !closeTime)) { console.warn(`Missing temp time ${startDate}-${endDate}`); } newData.temporaryHours.push(entryData); } else { formIsValid = false; } }); if (!formIsValid) { showBusinessInfoStatus("Save failed. Check required dates.", true); return; } newData.holidayHours.sort((a, b) => (a.date > b.date ? 1 : -1)); newData.temporaryHours.sort((a, b) => (a.startDate > b.startDate ? 1 : -1)); try { await setDoc(businessDocRef, newData); console.log("Business info saved."); showBusinessInfoStatus("Business info updated!", false); } catch (error) { console.error("Error saving business info:", error); showBusinessInfoStatus(`Error saving: ${error.message}`, true); } }
    async function savePresidentData(event) { event.preventDefault(); if (!auth || !auth.currentUser) { showPresidentStatus("Error: Not logged in.", true); return; } if (!presidentForm) return; console.log("Saving president data..."); const newDataFromForm = { name: presidentNameInput?.value.trim() || "", born: presidentBornInput?.value.trim() || "", height: presidentHeightInput?.value.trim() || "", party: presidentPartyInput?.value.trim() || "", term: presidentTermInput?.value.trim() || "", vp: presidentVpInput?.value.trim() || "", imageUrl: presidentImageUrlInput?.value.trim() || "", }; showPresidentStatus("Saving president info..."); try { let oldData = {}; const oldDataSnap = await getDoc(presidentDocRef); if (oldDataSnap.exists()) { oldData = oldDataSnap.data(); } await setDoc(presidentDocRef, { ...newDataFromForm, lastModified: serverTimestamp() }, { merge: true }); console.log("President data save successful."); showPresidentStatus("President info updated!", false); const changes = {}; let hasChanges = false; for (const key in newDataFromForm) { if (oldData[key] !== newDataFromForm[key]) { changes[key] = { to: newDataFromForm[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') { logAdminActivity('UPDATE_PRESIDENT_INFO', { name: newDataFromForm.name, changes: changes }); } } catch (error) { console.error("Error saving president data:", error); showPresidentStatus(`Error saving: ${error.message}`, true); } }
    async function handleAddShoutout(platform, formElement) { if (isAddingShoutout) return; isAddingShoutout = true; if (!formElement) { isAddingShoutout = false; return; } const username = formElement.querySelector(`#${platform}-username`)?.value.trim(); const nickname = formElement.querySelector(`#${platform}-nickname`)?.value.trim(); const orderStr = formElement.querySelector(`#${platform}-order`)?.value.trim(); const order = parseInt(orderStr); const isVerified = formElement.querySelector(`#${platform}-isVerified`)?.checked || false; const bio = formElement.querySelector(`#${platform}-bio`)?.value.trim() || null; const profilePic = formElement.querySelector(`#${platform}-profilePic`)?.value.trim() || null; let followers = 'N/A'; let subscribers = 'N/A'; let coverPhoto = null; if (platform === 'youtube') { subscribers = formElement.querySelector(`#${platform}-subscribers`)?.value.trim() || 'N/A'; coverPhoto = formElement.querySelector(`#${platform}-coverPhoto`)?.value.trim() || null; } else { followers = formElement.querySelector(`#${platform}-followers`)?.value.trim() || 'N/A'; } if (!username || !nickname || !orderStr || isNaN(order) || order < 0) { showAdminStatus(`Invalid input for ${platform}.`, true); isAddingShoutout = false; return; } try { const shoutoutsCol = collection(db, 'shoutouts'); const duplicateCheckQuery = query(shoutoutsCol, where("platform", "==", platform), where("username", "==", username), limit(1)); const querySnapshot = await getDocs(duplicateCheckQuery); if (!querySnapshot.empty) { showAdminStatus(`Error: Shoutout for @${username} on ${platform} already exists.`, true); isAddingShoutout = false; return; } const accountData = { platform, username, nickname, order, isVerified, bio, profilePic, createdAt: serverTimestamp(), isEnabled: true }; if (platform === 'youtube') { accountData.subscribers = subscribers; accountData.coverPhoto = coverPhoto; } else { accountData.followers = followers; } const docRef = await addDoc(collection(db, 'shoutouts'), accountData); await updateMetadataTimestamp(platform); showAdminStatus(`${platform.charAt(0).toUpperCase() + platform.slice(1)} shoutout added.`, false); formElement.reset(); const previewArea = formElement.querySelector(`#add-${platform}-preview`); if (previewArea) { previewArea.innerHTML = '<p><small>Preview appears here.</small></p>'; } if (typeof logAdminActivity === 'function') logAdminActivity('SHOUTOUT_ADD', { platform, username, id: docRef.id }); if (typeof loadShoutoutsAdmin === 'function') loadShoutoutsAdmin(platform); } catch (error) { console.error(`Error adding ${platform}:`, error); showAdminStatus(`Error: ${error.message}`, true); if (typeof logAdminActivity === 'function') logAdminActivity('SHOUTOUT_ADD_FAILED', { platform, username, error: error.message }); } finally { setTimeout(() => { isAddingShoutout = false; }, 1500); } }
    async function handleUpdateShoutout(event) { event.preventDefault(); if (!editForm) return; const docId = editForm.getAttribute('data-doc-id'); const platform = editForm.getAttribute('data-platform'); if (!docId || !platform) { showAdminStatus("Error: Missing ID/platform.", true); return; } const username = editUsernameInput?.value.trim(); const nickname = editNicknameInput?.value.trim(); const orderStr = editOrderInput?.value.trim(); const order = parseInt(orderStr); if (!username || !nickname || !orderStr || isNaN(order) || order < 0) { showAdminStatus(`Update Error: Invalid input...`, true); return; } const newDataFromForm = { username, nickname, order, isVerified: editIsVerifiedInput?.checked || false, bio: editBioInput?.value.trim() || null, profilePic: editProfilePicInput?.value.trim() || null, }; if (platform === 'youtube') { newDataFromForm.subscribers = editSubscribersInput?.value.trim() || 'N/A'; newDataFromForm.coverPhoto = editCoverPhotoInput?.value.trim() || null; } else { newDataFromForm.followers = editFollowersInput?.value.trim() || 'N/A'; } showAdminStatus("Updating shoutout..."); const docRef = doc(db, 'shoutouts', docId); try { let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, { ...newDataFromForm, lastModified: serverTimestamp() }); await updateMetadataTimestamp(platform); showAdminStatus(`${platform.charAt(0).toUpperCase() + platform.slice(1)} shoutout updated.`, false); const changes = {}; let hasChanges = false; for (const key in newDataFromForm) { if (oldData[key] !== newDataFromForm[key]) { changes[key] = { to: newDataFromForm[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') { logAdminActivity('SHOUTOUT_UPDATE', { id: docId, platform, username, changes }); } if (typeof closeEditModal === 'function') closeEditModal(); if (typeof loadShoutoutsAdmin === 'function') loadShoutoutsAdmin(platform); } catch (error) { console.error(`Error updating ${platform} ${docId}:`, error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleDeleteShoutout(docId, platform, listItemElement) { if (!confirm(`Delete this ${platform} shoutout?`)) return; showAdminStatus("Deleting..."); const docRef = doc(db, 'shoutouts', docId); let detailsToLog = { platform, id: docId, username: 'N/A', nickname: 'N/A' }; try { const docSnap = await getDoc(docRef); if (docSnap.exists()) { const data = docSnap.data(); detailsToLog.username = data.username || 'N/A'; detailsToLog.nickname = data.nickname || 'N/A'; } } catch (fetchError) { console.error(`Error fetching data before delete:`, fetchError); } try { await deleteDoc(docRef); await updateMetadataTimestamp(platform); showAdminStatus(`${platform.charAt(0).toUpperCase() + platform.slice(1)} shoutout deleted.`, false); if (typeof logAdminActivity === 'function') logAdminActivity('SHOUTOUT_DELETE', detailsToLog); if (typeof loadShoutoutsAdmin === 'function') loadShoutoutsAdmin(platform); } catch (error) { console.error(`Error deleting ${platform} ${docId}:`, error); showAdminStatus(`Error: ${error.message}`, true); if (typeof logAdminActivity === 'function') logAdminActivity('SHOUTOUT_DELETE_FAILED', { ...detailsToLog, error: error.message }); } }
    async function handleAddUsefulLink(event) { event.preventDefault(); if (!addUsefulLinkForm) return; const label = addUsefulLinkForm.querySelector('#link-label')?.value.trim(); const url = addUsefulLinkForm.querySelector('#link-url')?.value.trim(); const orderStr = addUsefulLinkForm.querySelector('#link-order')?.value.trim(); const order = parseInt(orderStr); if (!label || !url || !orderStr || isNaN(order) || order < 0) { showAdminStatus("Invalid input for Useful Link.", true); return; } try { new URL(url); } catch (_) { showAdminStatus("Invalid URL format.", true); return; } const linkData = { label, url, order, createdAt: serverTimestamp() }; showAdminStatus("Adding link..."); try { const docRef = await addDoc(usefulLinksCollectionRef, linkData); console.log("Useful link added:", docRef.id); showAdminStatus("Useful link added.", false); addUsefulLinkForm.reset(); loadUsefulLinksAdmin(); } catch (error) { console.error("Error adding useful link:", error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleUpdateUsefulLink(event) { event.preventDefault(); if (!editUsefulLinkForm) return; const docId = editUsefulLinkForm.getAttribute('data-doc-id'); if (!docId) { showEditLinkStatus("Error: Missing ID.", true); return; } const label = editLinkLabelInput?.value.trim(); const url = editLinkUrlInput?.value.trim(); const orderStr = editLinkOrderInput?.value.trim(); const order = parseInt(orderStr); if (!label || !url || !orderStr || isNaN(order) || order < 0) { showEditLinkStatus("Invalid input.", true); return; } try { new URL(url); } catch (_) { showEditLinkStatus("Invalid URL format.", true); return; } const newDataFromForm = { label, url, order }; showEditLinkStatus("Saving..."); const docRef = doc(db, 'useful_links', docId); try { let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, { ...newDataFromForm, lastModified: serverTimestamp() }); const changes = {}; let hasChanges = false; for (const key in newDataFromForm) { if (oldData[key] !== newDataFromForm[key]) { changes[key] = { to: newDataFromForm[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') logAdminActivity('USEFUL_LINK_UPDATE', { id: docId, label, changes }); showAdminStatus("Useful link updated.", false); closeEditUsefulLinkModal(); loadUsefulLinksAdmin(); } catch (error) { console.error(`Error updating link ${docId}:`, error); showEditLinkStatus(`Error: ${error.message}`, true); showAdminStatus(`Error updating link: ${error.message}`, true); } }
    async function handleDeleteUsefulLink(docId, listItemElement) { if (!confirm("Delete this useful link?")) return; showAdminStatus("Deleting link..."); try { await deleteDoc(doc(db, 'useful_links', docId)); showAdminStatus("Useful link deleted.", false); loadUsefulLinksAdmin(); } catch (error) { console.error(`Error deleting link ${docId}:`, error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleAddSocialLink(event) { event.preventDefault(); if (!addSocialLinkForm) return; const label = addSocialLinkForm.querySelector('#social-link-label')?.value.trim(); const url = addSocialLinkForm.querySelector('#social-link-url')?.value.trim(); const orderStr = addSocialLinkForm.querySelector('#social-link-order')?.value.trim(); const order = parseInt(orderStr); if (!label || !url || !orderStr || isNaN(order) || order < 0) { showAdminStatus("Invalid input for Social Link.", true); return; } try { new URL(url); } catch (_) { showAdminStatus("Invalid URL format.", true); return; } const linkData = { label, url, order, createdAt: serverTimestamp() }; showAdminStatus("Adding social link..."); try { const docRef = await addDoc(socialLinksCollectionRef, linkData); console.log("Social link added:", docRef.id); showAdminStatus("Social link added.", false); addSocialLinkForm.reset(); loadSocialLinksAdmin(); } catch (error) { console.error("Error adding social link:", error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleUpdateSocialLink(event) { event.preventDefault(); if (!editSocialLinkForm) return; const docId = editSocialLinkForm.getAttribute('data-doc-id'); if (!docId) { showEditSocialLinkStatus("Error: Missing ID.", true); return; } const label = editSocialLinkLabelInput?.value.trim(); const url = editSocialLinkUrlInput?.value.trim(); const orderStr = editSocialLinkOrderInput?.value.trim(); const order = parseInt(orderStr); if (!label || !url || !orderStr || isNaN(order) || order < 0) { showEditSocialLinkStatus("Invalid input.", true); return; } try { new URL(url); } catch (_) { showEditSocialLinkStatus("Invalid URL format.", true); return; } const newDataFromForm = { label, url, order }; showEditSocialLinkStatus("Saving changes..."); const docRef = doc(db, 'social_links', docId); try { let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, { ...newDataFromForm, lastModified: serverTimestamp() }); const changes = {}; let hasChanges = false; for (const key in newDataFromForm) { if (oldData[key] !== newDataFromForm[key]) { changes[key] = { to: newDataFromForm[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') logAdminActivity('SOCIAL_LINK_UPDATE', { id: docId, label, changes }); showAdminStatus("Social link updated.", false); closeEditSocialLinkModal(); loadSocialLinksAdmin(); } catch (error) { console.error(`Error updating social link ${docId}:`, error); showEditSocialLinkStatus(`Error: ${error.message}`, true); showAdminStatus(`Error updating social link: ${error.message}`, true); } }
    async function handleDeleteSocialLink(docId, listItemElement) { if (!confirm("Delete this social link?")) return; showAdminStatus("Deleting social link..."); try { await deleteDoc(doc(db, 'social_links', docId)); showAdminStatus("Social link deleted.", false); loadSocialLinksAdmin(); } catch (error) { console.error(`Error deleting social link ${docId}:`, error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleAddDisability(event) { event.preventDefault(); if (!addDisabilityForm) return; const name = addDisabilityForm.querySelector('#disability-name')?.value.trim(); const url = addDisabilityForm.querySelector('#disability-url')?.value.trim(); const orderStr = addDisabilityForm.querySelector('#disability-order')?.value.trim(); const order = parseInt(orderStr); if (!name || !url || !orderStr || isNaN(order) || order < 0) { showAdminStatus("Invalid input for Disability Link.", true); return; } try { new URL(url); } catch (_) { showAdminStatus("Invalid URL format.", true); return; } const disabilityData = { name, url, order, createdAt: serverTimestamp() }; showAdminStatus("Adding disability link..."); try { const docRef = await addDoc(disabilitiesCollectionRef, disabilityData); console.log("Disability link added:", docRef.id); showAdminStatus("Disability link added.", false); addDisabilityForm.reset(); loadDisabilitiesAdmin(); } catch (error) { console.error("Error adding disability link:", error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleUpdateDisability(event) { event.preventDefault(); if (!editDisabilityForm) return; const docId = editDisabilityForm.getAttribute('data-doc-id'); if (!docId) { showEditDisabilityStatus("Error: Missing ID.", true); return; } const name = editDisabilityNameInput?.value.trim(); const url = editDisabilityUrlInput?.value.trim(); const orderStr = editDisabilityOrderInput?.value.trim(); const order = parseInt(orderStr); if (!name || !url || !orderStr || isNaN(order) || order < 0) { showEditDisabilityStatus("Invalid input.", true); return; } try { new URL(url); } catch (_) { showEditDisabilityStatus("Invalid URL format.", true); return; } const newDataFromForm = { name, url, order }; showEditDisabilityStatus("Saving changes..."); const docRef = doc(db, 'disabilities', docId); try { let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, { ...newDataFromForm, lastModified: serverTimestamp() }); const changes = {}; let hasChanges = false; for (const key in newDataFromForm) { if (oldData[key] !== newDataFromForm[key]) { changes[key] = { to: newDataFromForm[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') logAdminActivity('DISABILITY_LINK_UPDATE', { id: docId, name, changes }); showAdminStatus("Disability link updated.", false); closeEditDisabilityModal(); loadDisabilitiesAdmin(); } catch (error) { console.error(`Error updating disability link ${docId}:`, error); showEditDisabilityStatus(`Error: ${error.message}`, true); showAdminStatus(`Error updating link: ${error.message}`, true); } }
    async function handleDeleteDisability(docId, listItemElement) { if (!confirm("Delete this disability link?")) return; showAdminStatus("Deleting disability link..."); try { await deleteDoc(doc(db, 'disabilities', docId)); showAdminStatus("Disability link deleted.", false); loadDisabilitiesAdmin(); } catch (error) { console.error(`Error deleting disability link ${docId}:`, error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleAddTechItem(event) { event.preventDefault(); if (!addTechItemForm) return; const techData = {}; const inputs = addTechItemForm.querySelectorAll('input[name], select[name], textarea[name]'); let isValid = true; inputs.forEach(input => { const name = input.name; let value = input.value.trim(); if (input.type === 'number') { value = input.value === '' ? null : parseFloat(input.value); if (input.value !== '' && isNaN(value)) { value = null; if (input.name === 'order' || input.name === 'batteryHealth' || input.name === 'batteryCycles') { showAdminStatus(`Invalid number for ${name}.`, true); isValid = false; } } else if (value !== null && value < 0 && (input.name === 'order' || input.name === 'batteryHealth' || input.name === 'batteryCycles')) { showAdminStatus(`${name} cannot be negative.`, true); isValid = false; } } techData[name] = value === '' ? null : value; }); if (!techData.name || techData.order === null || techData.order < 0 || isNaN(techData.order)) { showAdminStatus("Device Name and valid Order required.", true); isValid = false; } if (!isValid) return; techData.createdAt = serverTimestamp(); showAdminStatus("Adding tech item..."); try { const docRef = await addDoc(techItemsCollectionRef, techData); if (typeof logAdminActivity === 'function') logAdminActivity('TECH_ITEM_ADD', { name: techData.name, id: docRef.id }); showAdminStatus("Tech item added.", false); addTechItemForm.reset(); if (addTechItemPreview) addTechItemPreview.innerHTML = '<p><small>Preview appears here.</small></p>'; loadTechItemsAdmin(); } catch (error) { console.error("Error adding tech item:", error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleUpdateTechItem(event) { event.preventDefault(); if (!editTechItemForm) return; const docId = editTechItemForm.getAttribute('data-doc-id'); if (!docId) { showEditTechItemStatus("Error: Missing ID.", true); return; } const updatedData = {}; const inputs = editTechItemForm.querySelectorAll('input[name], select[name], textarea[name]'); let isValid = true; let techNameForLog = ''; inputs.forEach(input => { const name = input.name; let value = input.value.trim(); if (input.type === 'number') { value = input.value === '' ? null : parseFloat(input.value); if (input.value !== '' && isNaN(value)) { value = null; if (input.name === 'order' || input.name === 'batteryHealth' || input.name === 'batteryCycles') { showEditTechItemStatus(`Invalid number for ${name}.`, true); isValid = false; } } else if (value !== null && value < 0 && (input.name === 'order' || input.name === 'batteryHealth' || input.name === 'batteryCycles')) { showEditTechItemStatus(`${name} cannot be negative.`, true); isValid = false; } } updatedData[name] = value === '' ? null : value; if (name === 'name') techNameForLog = value; }); if (!updatedData.name || updatedData.order === null || updatedData.order < 0 || isNaN(updatedData.order)) { showEditTechItemStatus("Device Name and valid Order required.", true); isValid = false; } if (!isValid) return; updatedData.lastModified = serverTimestamp(); showEditTechItemStatus("Saving..."); try { const docRef = doc(db, 'tech_items', docId); let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, updatedData); const changes = {}; let hasChanges = false; for (const key in updatedData) { if (key !== 'lastModified' && oldData[key] !== updatedData[key]) { changes[key] = { from: oldData[key] ?? null, to: updatedData[key] }; hasChanges = true; } } if (hasChanges && typeof logAdminActivity === 'function') logAdminActivity('TECH_ITEM_UPDATE', { name: techNameForLog, id: docId, changes }); showAdminStatus("Tech item updated.", false); closeEditTechItemModal(); loadTechItemsAdmin(); } catch (error) { console.error(`Error updating tech item ${docId}:`, error); showEditTechItemStatus(`Error: ${error.message}`, true); if (typeof logAdminActivity === 'function') logAdminActivity('TECH_ITEM_UPDATE_FAILED', { name: techNameForLog, id: docId, error: error.message }); } }
    async function handleDeleteTechItem(docId, listItemElement) { if (!confirm("Delete this tech item?")) return; showAdminStatus("Deleting..."); let itemNameToLog = 'Unknown Item'; try { const itemSnap = await getDoc(doc(db, 'tech_items', docId)); if (itemSnap.exists()) itemNameToLog = itemSnap.data().name || 'Unknown Item'; await deleteDoc(doc(db, 'tech_items', docId)); if (typeof logAdminActivity === 'function') logAdminActivity('TECH_ITEM_DELETE', { name: itemNameToLog, id: docId }); showAdminStatus("Tech item deleted.", false); loadTechItemsAdmin(); } catch (error) { console.error(`Error deleting tech item ${docId}:`, error); if (typeof logAdminActivity === 'function') logAdminActivity('TECH_ITEM_DELETE_FAILED', { name: itemNameToLog, id: docId, error: error.message }); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleAddFaq(event) { event.preventDefault(); if (!addFaqForm) return; const question = addFaqForm.querySelector('#faq-question')?.value.trim(); const answer = addFaqForm.querySelector('#faq-answer')?.value.trim(); const orderStr = addFaqForm.querySelector('#faq-order')?.value.trim(); const order = parseInt(orderStr); if (!question || !answer || !orderStr || isNaN(order) || order < 0) { showAdminStatus("Question, Answer, and valid Order required.", true); return; } const faqData = { question, answer, order, createdAt: serverTimestamp() }; showAdminStatus("Adding FAQ..."); try { const docRef = await addDoc(faqsCollectionRef, faqData); console.log("FAQ added:", docRef.id); logAdminActivity('FAQ_ADD', { question, id: docRef.id }); showAdminStatus("FAQ added.", false); addFaqForm.reset(); loadFaqsAdmin(); } catch (error) { console.error("Error adding FAQ:", error); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleUpdateFaq(event) { event.preventDefault(); if (!editFaqForm) return; const docId = editFaqForm.getAttribute('data-doc-id'); if (!docId) { showEditFaqStatus("Error: Missing ID.", true); return; } const question = editFaqQuestionInput?.value.trim(); const answer = editFaqAnswerInput?.value.trim(); const orderStr = editFaqOrderInput?.value.trim(); const order = parseInt(orderStr); if (!question || !answer || !orderStr || isNaN(order) || order < 0) { showEditFaqStatus("Question, Answer, and valid Order required.", true); return; } const updatedData = { question, answer, order, lastModified: serverTimestamp() }; showEditFaqStatus("Saving..."); try { const docRef = doc(db, 'faqs', docId); let oldData = {}; const oldDataSnap = await getDoc(docRef); if (oldDataSnap.exists()) oldData = oldDataSnap.data(); await updateDoc(docRef, updatedData); const changes = {}; let hasChanges = false; for (const key in updatedData) { if (key !== 'lastModified' && oldData[key] !== updatedData[key]) { changes[key] = { from: oldData[key] ?? null, to: updatedData[key] }; hasChanges = true; } } if (hasChanges) { logAdminActivity('FAQ_UPDATE', { id: docId, question, changes }); } showAdminStatus("FAQ updated.", false); closeEditFaqModal(); loadFaqsAdmin(); } catch (error) { console.error(`Error updating FAQ ${docId}:`, error); showEditFaqStatus(`Error: ${error.message}`, true); logAdminActivity('FAQ_UPDATE_FAILED', { id: docId, question, error: error.message }); } }
    async function handleDeleteFaq(docId, listItemElement) { if (!confirm("Delete this FAQ?")) return; showAdminStatus("Deleting FAQ..."); let questionToLog = 'Unknown Question'; try { const faqSnap = await getDoc(doc(db, 'faqs', docId)); if (faqSnap.exists()) questionToLog = faqSnap.data().question || 'Unknown Question'; await deleteDoc(doc(db, 'faqs', docId)); logAdminActivity('FAQ_DELETE', { question: questionToLog, id: docId }); showAdminStatus("FAQ deleted.", false); loadFaqsAdmin(); } catch (error) { console.error(`Error deleting FAQ ${docId}:`, error); logAdminActivity('FAQ_DELETE_FAILED', { question: questionToLog, id: docId, error: error.message }); showAdminStatus(`Error: ${error.message}`, true); } }
    async function handleClearActivityLog() { /* ... (Keep function body) ... */ }
    async function saveStatusOverride() { /* ... (Keep function body) ... */ }
    async function handleAddGroup(event) { /* ... (Keep function body) ... */ }
    async function handleUpdateGroup(event) { /* ... (Keep function body) ... */ }
    async function handleDeleteGroup(docId) { /* ... (Keep function body) ... */ }
    async function handleAddComponent(event) { /* ... (Keep function body) ... */ }
    async function handleUpdateComponent(event) { /* ... (Keep function body) ... */ }
    async function handleDeleteComponent(docId) { /* ... (Keep function body) ... */ }
    async function handleQuickStatusChange(docId, newStatus) { /* ... (Keep function body) ... */ }
    async function handleAddIncident(event) { /* ... (Keep function body) ... */ }
    async function handleAddNewIncidentUpdate(event) { /* ... (Keep function body) ... */ }
    async function handleResolveIncident(docId) { /* ... (Keep function body) ... */ }
    async function handleAddMaintenance(event) { /* ... (Keep function body) ... */ }
    async function handleUpdateMaintenance(event) { /* ... (Keep function body) ... */ }
    async function handleDeleteMaintenance(docId) { /* ... (Keep function body) ... */ }


    // ============================================================
    // SECTION 8: MODAL OPEN/CLOSE FUNCTIONS
    // ============================================================
    function openEditModal(docId, platform) { /* ... (Keep function body) ... */ }
    function closeEditModal() { /* ... (Keep function body) ... */ }
    function openEditUsefulLinkModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditUsefulLinkModal() { /* ... (Keep function body) ... */ }
    function openEditSocialLinkModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditSocialLinkModal() { /* ... (Keep function body) ... */ }
    function openEditDisabilityModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditDisabilityModal() { /* ... (Keep function body) ... */ }
    function openEditTechItemModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditTechItemModal() { /* ... (Keep function body) ... */ }
    function openEditFaqModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditFaqModal() { /* ... (Keep function body) ... */ }
    function openEditGroupModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditGroupModal() { /* ... (Keep function body) ... */ }
    function openEditComponentModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditComponentModal() { /* ... (Keep function body) ... */ }
    function openUpdateIncidentModal(docId) { /* ... (Keep function body) ... */ }
    function closeUpdateIncidentModal() { /* ... (Keep function body) ... */ }
    function openEditMaintenanceModal(docId) { /* ... (Keep function body) ... */ }
    function closeEditMaintenanceModal() { /* ... (Keep function body) ... */ }


    // ============================================================
    // SECTION 9: FILTERING FUNCTIONS
    // ============================================================
    function displayFilteredShoutouts(platform) { /* ... (Keep function body) ... */ }
    function displayFilteredUsefulLinks() { /* ... (Keep function body) ... */ }
    function displayFilteredSocialLinks() { /* ... (Keep function body) ... */ }
    function displayFilteredDisabilities() { /* ... (Keep function body) ... */ }
    function displayFilteredTechItems() { /* ... (Keep function body) ... */ }
    function displayFilteredFaqs() { /* ... (Keep function body) ... */ }
    function displayFilteredActivityLog() { /* ... (Keep function body) ... */ }


    // ============================================================
    // SECTION 10: EVENT LISTENER ATTACHMENTS (MUST COME AFTER DEFINITIONS AND FUNCTIONS)
    // ============================================================

    // --- Login/Logout Listeners ---
    if (nextButton) { nextButton.addEventListener('click', () => { if(emailGroup) emailGroup.style.display = 'none'; if(nextButton) nextButton.style.display = 'none'; if(passwordGroup) passwordGroup.style.display = 'block'; if(loginButton) loginButton.style.display = 'inline-block'; if (passwordInput) { setTimeout(() => { passwordInput.focus(); }, 0); } }); }
    if (loginForm) { loginForm.addEventListener('submit', (e) => { e.preventDefault(); const email = emailInput.value; const password = passwordInput.value; if (!email || !password) { if (authStatus) authStatus.textContent = 'Please enter email and password.'; return; } if (authStatus) authStatus.textContent = 'Logging in...'; signInWithEmailAndPassword(auth, email, password).catch((error) => { console.error("Login failed:", error); if (authStatus) authStatus.textContent = `Login Failed: ${error.message}`; }); }); }
    if (logoutButton) { logoutButton.addEventListener('click', () => { removeActivityListeners(); signOut(auth).catch((error) => { console.error("Logout failed:", error); showAdminStatus(`Logout Failed: ${error.message}`, true); }); }); }

    // --- Profile & Settings Listeners ---
    if (profileForm) { profileForm.addEventListener('submit', saveProfileData); }
    if (profilePicUrlInput && adminPfpPreview) { profilePicUrlInput.addEventListener('input', () => { const url = profilePicUrlInput.value.trim(); if (url) { adminPfpPreview.src = url; adminPfpPreview.style.display = 'inline-block'; } else { adminPfpPreview.style.display = 'none'; } }); adminPfpPreview.onerror = () => { adminPfpPreview.style.display = 'none'; profilePicUrlInput.classList.add('input-error'); }; profilePicUrlInput.addEventListener('focus', () => { profilePicUrlInput.classList.remove('input-error'); }); }
    if (maintenanceModeToggle) { maintenanceModeToggle.addEventListener('change', (e) => saveMaintenanceModeStatus(e.target.checked)); }
    if (hideTikTokSectionToggle) { hideTikTokSectionToggle.addEventListener('change', (e) => saveHideTikTokSectionStatus(e.target.checked)); }
    if (saveCountdownSettingsButton) { saveCountdownSettingsButton.addEventListener('click', saveCountdownSettings); } // Assuming saveCountdownSettings exists

    // --- Business Info Listeners ---
    if (businessInfoForm) { setupBusinessInfoListeners(); }

    // --- President Listeners ---
    if (presidentForm) {
        const presidentPreviewInputs = [ presidentNameInput, presidentBornInput, presidentHeightInput, presidentPartyInput, presidentTermInput, presidentVpInput, presidentImageUrlInput ];
        presidentPreviewInputs.forEach(input => { if (input) input.addEventListener('input', updatePresidentPreview); });
        presidentForm.addEventListener('submit', savePresidentData);
    }

    // --- Shoutout Listeners ---
    if (addShoutoutTiktokForm) addSubmitListenerOnce(addShoutoutTiktokForm, () => handleAddShoutout('tiktok', addShoutoutTiktokForm));
    if (addShoutoutInstagramForm) addSubmitListenerOnce(addShoutoutInstagramForm, () => handleAddShoutout('instagram', addShoutoutInstagramForm));
    if (addShoutoutYoutubeForm) addSubmitListenerOnce(addShoutoutYoutubeForm, () => handleAddShoutout('youtube', addShoutoutYoutubeForm));
    if (editForm) editForm.addEventListener('submit', handleUpdateShoutout);
    if (searchInputTiktok) searchInputTiktok.addEventListener('input', () => displayFilteredShoutouts('tiktok'));
    if (searchInputInstagram) searchInputInstagram.addEventListener('input', () => displayFilteredShoutouts('instagram'));
    if (searchInputYoutube) searchInputYoutube.addEventListener('input', () => displayFilteredShoutouts('youtube'));
    if (addShoutoutTiktokForm) attachPreviewListeners(addShoutoutTiktokForm, 'tiktok', 'add');
    if (addShoutoutInstagramForm) attachPreviewListeners(addShoutoutInstagramForm, 'instagram', 'add');
    if (addShoutoutYoutubeForm) attachPreviewListeners(addShoutoutYoutubeForm, 'youtube', 'add');
    if (editForm) { const editPreviewInputs = [ editUsernameInput, editNicknameInput, editBioInput, editProfilePicInput, editIsVerifiedInput, editFollowersInput, editSubscribersInput, editCoverPhotoInput ]; editPreviewInputs.forEach(el => { if (el) { const eventType = (el.type === 'checkbox') ? 'change' : 'input'; el.addEventListener(eventType, () => { const currentPlatform = editForm.getAttribute('data-platform'); if (currentPlatform && typeof updateShoutoutPreview === 'function') { updateShoutoutPreview('edit', currentPlatform); } }); } }); }

    // --- Useful Links Listeners ---
    if (addUsefulLinkForm) { addUsefulLinkForm.addEventListener('submit', handleAddUsefulLink); }
    if (editUsefulLinkForm) { editUsefulLinkForm.addEventListener('submit', handleUpdateUsefulLink); }
    if (cancelEditLinkButton) { cancelEditLinkButton.addEventListener('click', closeEditUsefulLinkModal); }
    if (cancelEditLinkButtonSecondary) { cancelEditLinkButtonSecondary.addEventListener('click', closeEditUsefulLinkModal); }
    if (searchInputUsefulLinks) { searchInputUsefulLinks.addEventListener('input', displayFilteredUsefulLinks); }

    // --- Social Links Listeners ---
    if (addSocialLinkForm) { addSocialLinkForm.addEventListener('submit', handleAddSocialLink); }
    if (editSocialLinkForm) { editSocialLinkForm.addEventListener('submit', handleUpdateSocialLink); }
    if (cancelEditSocialLinkButton) { cancelEditSocialLinkButton.addEventListener('click', closeEditSocialLinkModal); }
    if (cancelEditSocialLinkButtonSecondary) { cancelEditSocialLinkButtonSecondary.addEventListener('click', closeEditSocialLinkModal); }
    if (searchInputSocialLinks) { searchInputSocialLinks.addEventListener('input', displayFilteredSocialLinks); }

    // --- Disabilities Listeners ---
    if (addDisabilityForm) { addDisabilityForm.addEventListener('submit', handleAddDisability); }
    if (editDisabilityForm) { editDisabilityForm.addEventListener('submit', handleUpdateDisability); }
    if (cancelEditDisabilityButton) { cancelEditDisabilityButton.addEventListener('click', closeEditDisabilityModal); }
    if (cancelEditDisabilityButtonSecondary) { cancelEditDisabilityButtonSecondary.addEventListener('click', closeEditDisabilityModal); }
    if (searchInputDisabilities) { searchInputDisabilities.addEventListener('input', displayFilteredDisabilities); }

    // --- Tech Listeners ---
    if (addTechItemForm) { addTechItemForm.addEventListener('submit', handleAddTechItem); attachTechPreviewListeners(addTechItemForm, 'add'); }
    if (editTechItemForm) { editTechItemForm.addEventListener('submit', handleUpdateTechItem); }
    if (cancelEditTechButton) { cancelEditTechButton.addEventListener('click', closeEditTechItemModal); }
    if (cancelEditTechButtonSecondary) { cancelEditTechButtonSecondary.addEventListener('click', closeEditTechItemModal); }
    if (searchTechItemsInput) { searchTechItemsInput.addEventListener('input', displayFilteredTechItems); }

    // --- FAQ Listeners ---
    if (addFaqForm) { addFaqForm.addEventListener('submit', handleAddFaq); }
    if (editFaqForm) { editFaqForm.addEventListener('submit', handleUpdateFaq); }
    if (cancelEditFaqButton) { cancelEditFaqButton.addEventListener('click', closeEditFaqModal); }
    if (cancelEditFaqButtonSecondary) { cancelEditFaqButtonSecondary.addEventListener('click', closeEditFaqModal); }
    if (searchFaqInput) { searchFaqInput.addEventListener('input', displayFilteredFaqs); }

    // --- Status Page Management Event Listeners (USAGE IS HERE) ---
    if (saveStatusOverrideButton) { saveStatusOverrideButton.addEventListener('click', saveStatusOverride); }
    if (addGroupForm) { addGroupForm.addEventListener('submit', handleAddGroup); } // <<< USAGE
    if (editGroupForm) { editGroupForm.addEventListener('submit', handleUpdateGroup); } // <<< USAGE
    if (cancelEditGroupButton) { cancelEditGroupButton.addEventListener('click', closeEditGroupModal); }
    if (cancelEditGroupButtonSecondary) { cancelEditGroupButtonSecondary.addEventListener('click', closeEditGroupModal); }
    if (groupsListAdminContainer) { groupsListAdminContainer.addEventListener('click', (event) => { const target = event.target; const listItem = target.closest('.group-admin-item'); const docId = listItem?.getAttribute('data-id'); if (!docId) return; if (target.classList.contains('edit-group-button')) { openEditGroupModal(docId); } else if (target.classList.contains('delete-group-button')) { handleDeleteGroup(docId); } }); }
    if (addComponentForm) { addComponentForm.addEventListener('submit', handleAddComponent); }
    if (editComponentForm) { editComponentForm.addEventListener('submit', handleUpdateComponent); }
    if (cancelEditComponentButton) { cancelEditComponentButton.addEventListener('click', closeEditComponentModal); }
    if (cancelEditComponentButtonSecondary) { cancelEditComponentButtonSecondary.addEventListener('click', closeEditComponentModal); }
    if (componentsListAdminContainer) { componentsListAdminContainer.addEventListener('click', (event) => { const target = event.target; const listItem = target.closest('.component-admin-item'); const docId = listItem?.getAttribute('data-id'); if (!docId) return; if (target.classList.contains('edit-component-button')) { openEditComponentModal(docId); } else if (target.classList.contains('delete-component-button')) { handleDeleteComponent(docId); } }); componentsListAdminContainer.addEventListener('change', (event) => { const target = event.target; if (target.classList.contains('component-status-quick-change')) { const docId = target.getAttribute('data-doc-id'); const newStatus = target.value; if (docId && newStatus) { handleQuickStatusChange(docId, newStatus); } else { target.value = ""; } } }); }
    if (addIncidentForm) { addIncidentForm.addEventListener('change', (event) => { if (event.target.name === 'startTimeOption') { if(incidentStartDateTimeField) incidentStartDateTimeField.style.display = (event.target.value === 'specific') ? 'block' : 'none'; } }); addIncidentForm.addEventListener('submit', handleAddIncident); }
    if (updateIncidentForm) { updateIncidentForm.addEventListener('submit', handleAddNewIncidentUpdate); }
    if (cancelUpdateIncidentButton) { cancelUpdateIncidentButton.addEventListener('click', closeUpdateIncidentModal); }
    if (cancelUpdateIncidentButtonSecondary) { cancelUpdateIncidentButtonSecondary.addEventListener('click', closeUpdateIncidentModal); }
    if (activeIncidentsListAdminContainer) { activeIncidentsListAdminContainer.addEventListener('click', (event) => { const target = event.target; const listItem = target.closest('.incident-admin-item'); const docId = listItem?.getAttribute('data-id'); if (!docId) return; if (target.classList.contains('update-incident-button')) { openUpdateIncidentModal(docId); } else if (target.classList.contains('resolve-incident-button')) { handleResolveIncident(docId); } }); }
    if (addMaintenanceForm) { addMaintenanceForm.addEventListener('submit', handleAddMaintenance); }
    if (editMaintenanceForm) { editMaintenanceForm.addEventListener('submit', handleUpdateMaintenance); }
    if (cancelEditMaintenanceButton) { cancelEditMaintenanceButton.addEventListener('click', closeEditMaintenanceModal); }
    if (cancelEditMaintenanceButtonSecondary) { cancelEditMaintenanceButtonSecondary.addEventListener('click', closeEditMaintenanceModal); }
    if (maintenanceListAdminContainer) { maintenanceListAdminContainer.addEventListener('click', (event) => { const target = event.target; const listItem = target.closest('.maintenance-admin-item'); const docId = listItem?.getAttribute('data-id'); if (!docId) return; if (target.classList.contains('edit-maintenance-button')) { openEditMaintenanceModal(docId); } else if (target.classList.contains('delete-maintenance-button')) { handleDeleteMaintenance(docId); } }); }

    // --- Activity Log Listeners ---
    if (clearLogBtn) { clearLogBtn.addEventListener('click', handleClearActivityLog); }
    if (searchActivityLogInput) { searchActivityLogInput.addEventListener('input', displayFilteredActivityLog); }


    // --- Window Click Listener (for closing modals) ---
    window.addEventListener('click', (event) => {
        if (event.target === editModal) { closeEditModal(); }
        if (event.target === editUsefulLinkModal) { closeEditUsefulLinkModal(); }
        if (event.target === editSocialLinkModal) { closeEditSocialLinkModal(); }
        if (event.target === editDisabilityModal) { closeEditDisabilityModal(); }
        if (event.target === editTechItemModal) { closeEditTechItemModal(); }
        if (event.target === editFaqModal) { closeEditFaqModal(); }
        if (event.target === editGroupModal) { closeEditGroupModal(); } // Status Group
        if (event.target === editComponentModal) { closeEditComponentModal(); } // Status Component
        if (event.target === updateIncidentModal) { closeUpdateIncidentModal(); } // Status Incident
        if (event.target === editMaintenanceModal) { closeEditMaintenanceModal(); } // Status Maintenance
    });


    // ============================================================
    // SECTION 11: AUTH STATE CHANGE LISTENER (Handles login/logout UI and initial data load)
    // ============================================================
    onAuthStateChanged(auth, user => {
        if (user) {
            // User is signed in
            console.log("User logged in:", user.email);
            if (loginSection) loginSection.style.display = 'none';
            if (adminContent) adminContent.style.display = 'block';
            if (logoutButton) logoutButton.style.display = 'inline-block';
            // Set Greeting
            const displayName = user.displayName; const email = user.email; let greetingText = '';
            if (displayName) { greetingText = `Logged in as: ${displayName}${email ? ` (${email})` : ''}`; }
            else if (email) { greetingText = `Logged in as: ${email}`; }
            else { greetingText = `Logged in`; }
            if (adminGreeting) { adminGreeting.textContent = greetingText; }
            if (authStatus) { authStatus.textContent = ''; authStatus.style.display = 'none'; }

            // --- Load ALL Admin Data ---
            loadProfileData();
            loadBusinessInfoData();
            setupBusinessInfoListeners(); // Re-attach listeners after loading data
            loadPresidentData();
            if (typeof loadShoutoutsAdmin === 'function') { loadShoutoutsAdmin('tiktok'); loadShoutoutsAdmin('instagram'); loadShoutoutsAdmin('youtube'); }
            if (typeof loadUsefulLinksAdmin === 'function') { loadUsefulLinksAdmin(); }
            if (typeof loadSocialLinksAdmin === 'function') { loadSocialLinksAdmin(); }
            if (typeof loadDisabilitiesAdmin === 'function') { loadDisabilitiesAdmin(); }
            if (typeof loadTechItemsAdmin === 'function') { loadTechItemsAdmin(); }
            if (typeof loadFaqsAdmin === 'function') { loadFaqsAdmin(); }
            // Load Status Page Data
            console.log("Loading status page admin data...");
            if (typeof loadStatusOverride === 'function') { loadStatusOverride(); }
            if (typeof loadGroupsAdmin === 'function') { loadGroupsAdmin(); } // Groups first
            if (typeof loadComponentsAdmin === 'function') { loadComponentsAdmin(); } // Then components
            if (typeof loadIncidentsAdmin === 'function') { loadIncidentsAdmin(); }
            if (typeof loadMaintenanceAdmin === 'function') { loadMaintenanceAdmin(); }
            // Load Activity Log
            if (typeof loadActivityLog === 'function') { loadActivityLog(); }

            // Start inactivity timer
            resetInactivityTimer();
            addActivityListeners();

        } else {
            // User is signed out
            console.log("User logged out.");
            if (loginSection) loginSection.style.display = 'block';
            if (adminContent) adminContent.style.display = 'none';
            if (logoutButton) logoutButton.style.display = 'none';
            if (adminGreeting) adminGreeting.textContent = '';
            if (loginForm) loginForm.reset();
            // Reset login form steps
            if (emailGroup) emailGroup.style.display = 'block';
            if (passwordGroup) passwordGroup.style.display = 'none';
            if (nextButton) nextButton.style.display = 'inline-block';
            if (loginButton) loginButton.style.display = 'none';
            if (authStatus) { authStatus.textContent = ''; authStatus.style.display = 'none'; }

            // Close ALL modals
            if (typeof closeEditModal === 'function') closeEditModal();
            if (typeof closeEditUsefulLinkModal === 'function') closeEditUsefulLinkModal();
            if (typeof closeEditSocialLinkModal === 'function') closeEditSocialLinkModal();
            if (typeof closeEditDisabilityModal === 'function') closeEditDisabilityModal();
            if (typeof closeEditTechItemModal === 'function') closeEditTechItemModal();
            if (typeof closeEditFaqModal === 'function') closeEditFaqModal();
            if (typeof closeEditGroupModal === 'function') closeEditGroupModal();
            if (typeof closeEditComponentModal === 'function') closeEditComponentModal();
            if (typeof closeUpdateIncidentModal === 'function') closeUpdateIncidentModal();
            if (typeof closeEditMaintenanceModal === 'function') closeEditMaintenanceModal();

            // Stop inactivity timer
            removeActivityListeners();
        }
    });

}); // End DOMContentLoaded Event Listener
